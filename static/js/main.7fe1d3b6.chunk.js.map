{"version":3,"sources":["simple.js","wasm-build/libsnpspice.js","App.tsx","reportWebVitals.js","index.js"],"names":["addDefineSimpleMode","CodeMirror","ensureState","states","name","hasOwnProperty","Error","toRegex","val","caret","flags","RegExp","ignoreCase","source","String","Rule","data","next","push","this","regex","token","apply","replace","result","i","length","asToken","tokenFunction","config","stream","state","pending","pend","shift","pos","text","local","end","match","tok","endToken","localState","m","mode","endScan","exec","current","start","index","curState","rule","matches","sol","stack","pop","enterLocalMode","indent","indentation","indentUnit","dedent","j","backUp","join","cmp","a","b","props","prop","spec","pers","persistent","p","persistentStates","getMode","lState","startState","forceEnd","indentFunction","meta","textAfter","line","dontIndentStates","arr","indexOf","Pass","rules","scan","dedentIfLineStart","slice","defineSimpleMode","defineMode","simpleMode","states_","hasIndentation","list","orig","copyState","s","innerMode","wasm","heap","Array","fill","undefined","getObject","idx","heap_next","takeObject","ret","dropObject","cachegetUint32Memory0","getUint32Memory0","buffer","memory","Uint32Array","WASM_VECTOR_LEN","passArray32ToWasm0","arg","malloc","ptr","set","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachegetUint8Memory0","getUint8Memory0","Uint8Array","perform_simulation","description","nets_to_trace","net_count","duration","clock_divider","retptr","__wbindgen_add_to_stack_pointer","ptr0","__wbindgen_malloc","len0","ptr1","len1","r0","r1","v2","len","subarray","__wbindgen_free","get_indices","v0","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm0","decode","addHeapObject","obj","cachedTextEncoder","TextEncoder","encodeString","encodeInto","view","buf","encode","read","written","passStringToWasm0","realloc","mem","offset","code","charCodeAt","load","module","imports","Response","WebAssembly","instantiateStreaming","headers","get","console","warn","arrayBuffer","bytes","instantiate","instance","Instance","init","input","wbg","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","arg0","arg1","__wbindgen_realloc","__wbg_error_4bb6c2a97407129a","error","__wbindgen_object_drop_ref","Request","URL","fetch","exports","__wbindgen_wasm_module","wasmInitialized","process","then","init_panic_hook","builtinRead","x","Sk","window","builtinFiles","require","RawCodeMirror","comment","lineComment","UnionFind","weights","Map","parents","k","has","path","root","node","keys","roots","map","canonicalize","totalWeight","heaviest","heaviestWeight","weight","renderTraces","level","simResults","grading","height","probes","svgContents","probeIndex","probe","forwardPass","backwardPass","shootThroughStart","trace","netTraces","net","traceVal","xStep","yMin","yMax","reverse","transform","y","stroke","label","d","strokeWidth","textAnchor","errorX","failureTime","gridLines","t","clockDivider","simSteps","tickSpacing","style","width","success","miniMessage","persistLevelState","levelInternalName","levelState","localStorage","setItem","JSON","stringify","metadata","doGrading","tracesToGrade","netName","reqs","failureMessages","message","time","value","mapping","0","1","2","got","wanted","reqSeq","Math","round","c","globalLevelsList","internalName","levelDesc","startingCode","makeInputNets","components","kind","pattern","repeat","makeOutputNets","gradeResults","self","TextEditor","options","theme","lineNumbers","lineWrapping","extraKeys","extraKeysMaker","onBeforeChange","editor","setState","getSavedCode","position","right","bottom","userSelect","pointerEvents","zIndex","color","opacity","React","PureComponent","App","levelStates","textEditorRef","createRef","onCompile","pre","results","nextId","getId","toString","builtins","vdd","ffi","remapToPy","gnd","new_net","remapToJs","co_varnames","$defaults","co_numargs","nfet","gate","drain","isPfet","pfet","pull_down_resistor","direction","pull_up_resistor","wire_together","net1","net2","nets","signal","toLowerCase","endsWith","make_sram","address_nets","bus_in_nets","bus_out_nets","write_enable_net","contents","includes","get_level_inputs","currentLevel","get_level_outputs","configure","output","misceval","asyncToPromise","importMainWithBody","mod","terminalOutput","paneColor","simulate","err","simOutput","getIsUnsaved","getCode","loadLevelStatesFromLocalStorage","page","docsOpen","cheatMode","onpopstate","event","navigateBack","cheatIndex","cheatSequence","document","addEventListener","evt","key","parse","getItem","lineNum","lineOfCode","split","startTime","performance","now","Set","tracedNets","netCanonicalizer","component","add","union","descArray","netIndices","canonicalizedNet","size","traceValues","from","traceIndices","traces","earliestShootThrough","get_first_shoot_through","shootThroughOccurred","elapsed","everBeaten","everOpened","history","pushState","confirm","locked","fontFamily","display","justifyContent","textAlign","fontSize","marginTop","flexDirection","margin","padding","className","onClick","switchToLevel","left","top","clear","forceUpdate","vertSplitDefault","parseInt","minSize","defaultSize","onChange","resizerStyle","background","minWidth","cursor","alignItems","borderBottom","setCode","ref","textEditorComponent","cm","backgroundColor","overflow","overflowY","whiteSpace","boxShadow","boxSizing","transition","fontWeight","marginLeft","marginBottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uIAIO,SAASA,EAAoBC,GAkDhC,SAASC,EAAYC,EAAQC,GAC3B,IAAKD,EAAOE,eAAeD,GACzB,MAAM,IAAIE,MAAM,mBAAqBF,EAAO,mBAGhD,SAASG,EAAQC,EAAKC,GACpB,IAAKD,EAAK,MAAO,OACjB,IAAIE,EAAQ,GAOZ,OANIF,aAAeG,QACbH,EAAII,aAAYF,EAAQ,KAC5BF,EAAMA,EAAIK,QAEVL,EAAMM,OAAON,GAER,IAAIG,SAAkB,IAAVF,EAAkB,GAAK,KAAO,MAAQD,EAAM,IAAKE,GAatE,SAASK,EAAKC,EAAMb,IACda,EAAKC,MAAQD,EAAKE,OAAMhB,EAAYC,EAAQa,EAAKC,MAAQD,EAAKE,MAClEC,KAAKC,MAAQb,EAAQS,EAAKI,OAC1BD,KAAKE,MAbP,SAAiBb,GACf,IAAKA,EAAK,OAAO,KACjB,GAAIA,EAAIc,MAAO,OAAOd,EACtB,GAAkB,iBAAPA,EAAiB,OAAOA,EAAIe,QAAQ,MAAO,KAEtD,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIjB,EAAIkB,OAAQD,IAC9BD,EAAON,KAAKV,EAAIiB,IAAMjB,EAAIiB,GAAGF,QAAQ,MAAO,MAC9C,OAAOC,EAMMG,CAAQX,EAAKK,OAC1BF,KAAKH,KAAOA,EAGd,SAASY,EAAczB,EAAQ0B,GAC7B,OAAO,SAASC,EAAQC,GACtB,GAAIA,EAAMC,QAAS,CACjB,IAAIC,EAAOF,EAAMC,QAAQE,QAGzB,OAF4B,GAAxBH,EAAMC,QAAQN,SAAaK,EAAMC,QAAU,MAC/CF,EAAOK,KAAOF,EAAKG,KAAKV,OACjBO,EAAKZ,MAGd,GAAIU,EAAMM,MAAO,CACf,GAAIN,EAAMM,MAAMC,KAAOR,EAAOS,MAAMR,EAAMM,MAAMC,KAAM,CACpD,IAAIE,EAAMT,EAAMM,MAAMI,UAAY,KAElC,OADAV,EAAMM,MAAQN,EAAMW,WAAa,KAC1BF,EAEP,IAA4DG,EAAxDH,EAAMT,EAAMM,MAAMO,KAAKvB,MAAMS,EAAQC,EAAMW,YAG/C,OAFIX,EAAMM,MAAMQ,UAAYF,EAAIZ,EAAMM,MAAMQ,QAAQC,KAAKhB,EAAOiB,cAC9DjB,EAAOK,IAAML,EAAOkB,MAAQL,EAAEM,OACzBT,EAKX,IADA,IAAIU,EAAW/C,EAAO4B,EAAMA,OACnBN,EAAI,EAAGA,EAAIyB,EAASxB,OAAQD,IAAK,CACxC,IAAI0B,EAAOD,EAASzB,GAChB2B,IAAYD,EAAKnC,KAAKqC,KAAOvB,EAAOuB,QAAUvB,EAAOS,MAAMY,EAAK/B,OACpE,GAAIgC,EAAS,CACPD,EAAKnC,KAAKC,KACZc,EAAMA,MAAQoB,EAAKnC,KAAKC,KACfkC,EAAKnC,KAAKE,OAClBa,EAAMuB,QAAUvB,EAAMuB,MAAQ,KAAKpC,KAAKa,EAAMA,OAC/CA,EAAMA,MAAQoB,EAAKnC,KAAKE,MACfiC,EAAKnC,KAAKuC,KAAOxB,EAAMuB,OAASvB,EAAMuB,MAAM5B,SACrDK,EAAMA,MAAQA,EAAMuB,MAAMC,OAGxBJ,EAAKnC,KAAK4B,MACZY,EAAe3B,EAAQE,EAAOoB,EAAKnC,KAAK4B,KAAMO,EAAK9B,OACjD8B,EAAKnC,KAAKyC,QACZ1B,EAAM0B,OAAOvC,KAAKY,EAAO4B,cAAgB7B,EAAO8B,YAC9CR,EAAKnC,KAAK4C,QACZ7B,EAAM0B,OAAOF,MACf,IAAIlC,EAAQ8B,EAAK9B,MAEjB,GADIA,GAASA,EAAMC,QAAOD,EAAQA,EAAM+B,IACpCA,EAAQ1B,OAAS,GAAKyB,EAAK9B,OAA8B,iBAAd8B,EAAK9B,MAAmB,CACrEU,EAAMC,QAAU,GAChB,IAAK,IAAI6B,EAAI,EAAGA,EAAIT,EAAQ1B,OAAQmC,IAC9BT,EAAQS,IACV9B,EAAMC,QAAQd,KAAK,CAACkB,KAAMgB,EAAQS,GAAIxC,MAAO8B,EAAK9B,MAAMwC,EAAI,KAEhE,OADA/B,EAAOgC,OAAOV,EAAQ,GAAG1B,QAAU0B,EAAQ,GAAKA,EAAQ,GAAG1B,OAAS,IAC7DL,EAAM,GACR,OAAIA,GAASA,EAAM0C,KACjB1C,EAAM,GAENA,GAKb,OADAS,EAAOb,OACA,MAIX,SAAS+C,EAAIC,EAAGC,GACd,GAAID,IAAMC,EAAG,OAAO,EACpB,IAAKD,GAAiB,iBAALA,IAAkBC,GAAiB,iBAALA,EAAe,OAAO,EACrE,IAAIC,EAAQ,EACZ,IAAK,IAAIC,KAAQH,EAAG,GAAIA,EAAE5D,eAAe+D,GAAO,CAC9C,IAAKF,EAAE7D,eAAe+D,KAAUJ,EAAIC,EAAEG,GAAOF,EAAEE,IAAQ,OAAO,EAC9DD,IAEF,IAAK,IAAIC,KAAQF,EAAOA,EAAE7D,eAAe+D,IAAOD,IAChD,OAAgB,GAATA,EAGT,SAASX,EAAe3B,EAAQE,EAAOsC,EAAMhD,GAC3C,IAAIiD,EACJ,GAAID,EAAKE,WAAY,IAAK,IAAIC,EAAIzC,EAAM0C,iBAAkBD,IAAMF,EAAME,EAAIA,EAAEvD,MACtEoD,EAAKA,KAAOL,EAAIK,EAAKA,KAAMG,EAAEH,MAAQA,EAAKzB,MAAQ4B,EAAE5B,QAAM0B,EAAOE,GACvE,IAAI5B,EAAO0B,EAAOA,EAAK1B,KAAOyB,EAAKzB,MAAQ3C,EAAWyE,QAAQ7C,EAAQwC,EAAKA,MACvEM,EAASL,EAAOA,EAAKvC,MAAQ9B,EAAW2E,WAAWhC,GACnDyB,EAAKE,aAAeD,IACtBvC,EAAM0C,iBAAmB,CAAC7B,KAAMA,EAAMyB,KAAMA,EAAKA,KAAMtC,MAAO4C,EAAQ1D,KAAMc,EAAM0C,mBAEpF1C,EAAMW,WAAaiC,EACnB5C,EAAMM,MAAQ,CAACO,KAAMA,EACNN,IAAK+B,EAAK/B,KAAO/B,EAAQ8D,EAAK/B,KAC9BO,QAASwB,EAAK/B,MAAyB,IAAlB+B,EAAKQ,UAAsBtE,EAAQ8D,EAAK/B,KAAK,GAClEG,SAAUpB,GAASA,EAAM0C,KAAO1C,EAAMA,EAAMK,OAAS,GAAKL,GAO3E,SAASyD,EAAe3E,EAAQ4E,GAC9B,OAAO,SAAShD,EAAOiD,EAAWC,GAChC,GAAIlD,EAAMM,OAASN,EAAMM,MAAMO,KAAKa,OAClC,OAAO1B,EAAMM,MAAMO,KAAKa,OAAO1B,EAAMW,WAAYsC,EAAWC,GAC9D,GAAoB,MAAhBlD,EAAM0B,QAAkB1B,EAAMM,OAAS0C,EAAKG,kBARpD,SAAiB1E,EAAK2E,GACpB,IAAK,IAAI1D,EAAI,EAAGA,EAAI0D,EAAIzD,OAAQD,IAAK,GAAI0D,EAAI1D,KAAOjB,EAAK,OAAO,EAOM4E,CAAQrD,EAAMA,MAAOgD,EAAKG,mBAAqB,EACjH,OAAOjF,EAAWoF,KAEpB,IAAIlD,EAAMJ,EAAM0B,OAAO/B,OAAS,EAAG4D,EAAQnF,EAAO4B,EAAMA,OACxDwD,EAAM,OAAS,CACb,IAAK,IAAI9D,EAAI,EAAGA,EAAI6D,EAAM5D,OAAQD,IAAK,CACrC,IAAI0B,EAAOmC,EAAM7D,GACjB,GAAI0B,EAAKnC,KAAK4C,SAA0C,IAAhCT,EAAKnC,KAAKwE,kBAA6B,CAC7D,IAAI7C,EAAIQ,EAAK/B,MAAM0B,KAAKkC,GACxB,GAAIrC,GAAKA,EAAE,GAAI,CACbR,KACIgB,EAAKlC,MAAQkC,EAAKjC,QAAMoE,EAAQnF,EAAOgD,EAAKlC,MAAQkC,EAAKjC,OAC7D8D,EAAYA,EAAUS,MAAM9C,EAAE,GAAGjB,QACjC,SAAS6D,IAIf,MAEF,OAAOpD,EAAM,EAAI,EAAIJ,EAAM0B,OAAOtB,IAvMtClC,EAAWyF,iBAAmB,SAAStF,EAAMD,GAC3CF,EAAW0F,WAAWvF,GAAM,SAASyB,GACnC,OAAO5B,EAAW2F,WAAW/D,EAAQ1B,OAIzCF,EAAW2F,WAAa,SAAS/D,EAAQ1B,GACvCD,EAAYC,EAAQ,SACpB,IAAI0F,EAAU,GAAId,EAAO5E,EAAO4E,MAAQ,GAAIe,GAAiB,EAC7D,IAAK,IAAI/D,KAAS5B,EAAQ,GAAI4B,GAASgD,GAAQ5E,EAAOE,eAAe0B,GAEnE,IADA,IAAIgE,EAAOF,EAAQ9D,GAAS,GAAIiE,EAAO7F,EAAO4B,GACrCN,EAAI,EAAGA,EAAIuE,EAAKtE,OAAQD,IAAK,CACpC,IAAIT,EAAOgF,EAAKvE,GAChBsE,EAAK7E,KAAK,IAAIH,EAAKC,EAAMb,KACrBa,EAAKyC,QAAUzC,EAAK4C,UAAQkC,GAAiB,GAGrD,IAAIlD,EAAO,CACTgC,WAAY,WACV,MAAO,CAAC7C,MAAO,QAASC,QAAS,KACzBK,MAAO,KAAMK,WAAY,KACzBe,OAAQqC,EAAiB,GAAK,OAExCG,UAAW,SAASlE,GAClB,IAAImE,EAAI,CAACnE,MAAOA,EAAMA,MAAOC,QAASD,EAAMC,QACnCK,MAAON,EAAMM,MAAOK,WAAY,KAChCe,OAAQ1B,EAAM0B,QAAU1B,EAAM0B,OAAOgC,MAAM,IAChD1D,EAAMW,aACRwD,EAAExD,WAAazC,EAAWgG,UAAUlE,EAAMM,MAAMO,KAAMb,EAAMW,aAC1DX,EAAMuB,QACR4C,EAAE5C,MAAQvB,EAAMuB,MAAMmC,MAAM,IAC9B,IAAK,IAAInB,EAAOvC,EAAM0C,iBAAkBH,EAAMA,EAAOA,EAAKrD,KACxDiF,EAAEzB,iBAAmB,CAAC7B,KAAM0B,EAAK1B,KACXyB,KAAMC,EAAKD,KACXtC,MAAOuC,EAAKvC,OAASA,EAAMW,WAAawD,EAAExD,WAAazC,EAAWgG,UAAU3B,EAAK1B,KAAM0B,EAAKvC,OAC5Fd,KAAMiF,EAAEzB,kBAChC,OAAOyB,GAET7E,MAAOO,EAAciE,EAAShE,GAC9BsE,UAAW,SAASpE,GAAS,OAAOA,EAAMM,OAAS,CAACO,KAAMb,EAAMM,MAAMO,KAAMb,MAAOA,EAAMW,aACzFe,OAAQqB,EAAee,EAASd,IAElC,GAAIA,EAAM,IAAK,IAAIX,KAAQW,EAAUA,EAAK1E,eAAe+D,KACvDxB,EAAKwB,GAAQW,EAAKX,IACpB,OAAOxB,GAnDb,4D,2CCCIwD,E,mLAEEC,EAAO,IAAIC,MAAM,IAAIC,UAAKC,GAIhC,SAASC,EAAUC,GAAO,OAAOL,EAAKK,GAFtCL,EAAKnF,UAAKsF,EAAW,MAAM,GAAM,GAIjC,IAAIG,EAAYN,EAAK3E,OAQrB,SAASkF,EAAWF,GAChB,IAAMG,EAAMJ,EAAUC,GAEtB,OATJ,SAAoBA,GACZA,EAAM,KACVL,EAAKK,GAAOC,EACZA,EAAYD,GAKZI,CAAWJ,GACJG,EAQX,IAAIE,EAAwB,KAC5B,SAASC,IAIL,OAH8B,OAA1BD,GAAkCA,EAAsBE,SAAWb,EAAKc,OAAOD,SAC/EF,EAAwB,IAAII,YAAYf,EAAKc,OAAOD,SAEjDF,EAGX,IAAIK,EAAkB,EAEtB,SAASC,EAAmBC,EAAKC,GAC7B,IAAMC,EAAMD,EAAoB,EAAbD,EAAI5F,QAGvB,OAFAsF,IAAmBS,IAAIH,EAAKE,EAAM,GAClCJ,EAAkBE,EAAI5F,OACf8F,EAGX,IAAIE,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBT,SAAWb,EAAKc,OAAOD,SAC7ES,EAAuB,IAAIE,WAAWxB,EAAKc,OAAOD,SAE/CS,EAGX,IAAIG,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBZ,SAAWb,EAAKc,OAAOD,SAC7EY,EAAuB,IAAIE,WAAW3B,EAAKc,OAAOD,SAE/CY,EAcJ,SAASG,EAAmBC,EAAaC,EAAeC,EAAWC,EAAUC,GAChF,IACI,IAAMC,EAASlC,EAAKmC,iCAAiC,IACjDC,EAAOnB,EAAmBY,EAAa7B,EAAKqC,mBAC5CC,EAAOtB,EACPuB,EAAOtB,EAAmBa,EAAe9B,EAAKqC,mBAC9CG,EAAOxB,EACXhB,EAAK4B,mBAAmBM,EAAQE,EAAME,EAAMC,EAAMC,EAAMT,EAAWC,EAAUC,GAC7E,IAAIQ,EAAKlB,IAAkBW,EAAS,EAAI,GACpCQ,EAAKnB,IAAkBW,EAAS,EAAI,GACpCS,GArBiBvB,EAqBQqB,EArBHG,EAqBOF,EApB9BhB,IAAkBmB,SAASzB,EAAM,EAAGA,EAAM,EAAIwB,IAoBZvD,QAErC,OADAW,EAAK8C,gBAAgBL,EAAS,EAALC,GAClBC,EAXX,QAaI3C,EAAKmC,gCAAgC,IAzB7C,IAA6Bf,EAAKwB,EAmC3B,SAASG,IACZ,IACI,IAAMb,EAASlC,EAAKmC,iCAAiC,IACrDnC,EAAK+C,YAAYb,GACjB,IAAIO,EAAKlB,IAAkBW,EAAS,EAAI,GACpCQ,EAAKnB,IAAkBW,EAAS,EAAI,GACpCc,GAZkB5B,EAYQqB,EAZHG,EAYOF,EAX/B9B,IAAmBiC,SAASzB,EAAM,EAAGA,EAAM,EAAIwB,IAWZvD,QAEtC,OADAW,EAAK8C,gBAAgBL,EAAS,EAALC,GAClBM,EAPX,QASIhD,EAAKmC,gCAAgC,IAhB7C,IAA8Bf,EAAKwB,EA4BnC,IAAIK,EAAoB,IAAIC,YAAY,QAAS,CAAEC,WAAW,EAAMC,OAAO,IAI3E,SAASC,EAAmBjC,EAAKwB,GAC7B,OAAOK,EAAkBK,OAAO5B,IAAkBmB,SAASzB,EAAKA,EAAMwB,IAG1E,SAASW,EAAcC,GACfjD,IAAcN,EAAK3E,QAAQ2E,EAAKnF,KAAKmF,EAAK3E,OAAS,GACvD,IAAMgF,EAAMC,EAIZ,OAHAA,EAAYN,EAAKK,GAEjBL,EAAKK,GAAOkD,EACLlD,EAZX2C,EAAkBK,SAelB,IAAIG,EAAoB,IAAIC,YAAY,SAElCC,EAAwD,oBAAjCF,EAAkBG,WACzC,SAAU1C,EAAK2C,GACjB,OAAOJ,EAAkBG,WAAW1C,EAAK2C,IAEvC,SAAU3C,EAAK2C,GACjB,IAAMC,EAAML,EAAkBM,OAAO7C,GAErC,OADA2C,EAAKxC,IAAIyC,GACF,CACHE,KAAM9C,EAAI5F,OACV2I,QAASH,EAAIxI,SAIrB,SAAS4I,EAAkBhD,EAAKC,EAAQgD,GAEpC,QAAgB/D,IAAZ+D,EAAuB,CACvB,IAAML,EAAML,EAAkBM,OAAO7C,GAC/BE,EAAMD,EAAO2C,EAAIxI,QAGvB,OAFAoG,IAAkBmB,SAASzB,EAAKA,EAAM0C,EAAIxI,QAAQ+F,IAAIyC,GACtD9C,EAAkB8C,EAAIxI,OACf8F,EAUX,IAPA,IAAIwB,EAAM1B,EAAI5F,OACV8F,EAAMD,EAAOyB,GAEXwB,EAAM1C,IAER2C,EAAS,EAENA,EAASzB,EAAKyB,IAAU,CAC3B,IAAMC,EAAOpD,EAAIqD,WAAWF,GAC5B,GAAIC,EAAO,IAAM,MACjBF,EAAIhD,EAAMiD,GAAUC,EAGxB,GAAID,IAAWzB,EAAK,CACD,IAAXyB,IACAnD,EAAMA,EAAI7B,MAAMgF,IAEpBjD,EAAM+C,EAAQ/C,EAAKwB,EAAKA,EAAMyB,EAAsB,EAAbnD,EAAI5F,QAC3C,IAAMuI,EAAOnC,IAAkBmB,SAASzB,EAAMiD,EAAQjD,EAAMwB,GAG5DyB,GAFYV,EAAazC,EAAK2C,GAEhBI,QAIlB,OADAjD,EAAkBqD,EACXjD,E,SAGIoD,E,gFAAf,WAAoBC,EAAQC,GAA5B,iBAAA7G,EAAA,2DAC4B,oBAAb8G,UAA2BF,aAAkBE,UAD5D,oBAEwD,oBAArCC,YAAYC,qBAF/B,0CAI6BD,YAAYC,qBAAqBJ,EAAQC,GAJtE,2EAO0D,oBAAtCD,EAAOK,QAAQC,IAAI,gBAPvC,iBAQoBC,QAAQC,KAAK,oMAAb,MARpB,4DAgB4BR,EAAOS,cAhBnC,eAgBcC,EAhBd,iBAiBqBP,YAAYQ,YAAYD,EAAOT,GAjBpD,kEAoB+BE,YAAYQ,YAAYX,EAAQC,GApB/D,cAoBcW,EApBd,kBAsBgCT,YAAYU,UAtB5C,0CAuBmB,CAAED,WAAUZ,WAvB/B,iCA0BmBY,GA1BnB,0D,+BA+BeE,E,8EAAf,WAAoBC,GAApB,qBAAA3H,EAAA,6DAIU6G,EAAU,IACRe,IAAM,GACdf,EAAQe,IAAIC,2BAA6B,WAErC,OAAOnC,EADG,IAAIrJ,QAGlBwK,EAAQe,IAAIE,6BAA+B,SAASC,EAAMC,GACtD,IACIzD,EAAO8B,EADD7D,EAAUwF,GAAM3I,MACQ8C,EAAKqC,kBAAmBrC,EAAK8F,oBAC3DxD,EAAOtB,EACXO,IAAkBqE,EAAO,EAAI,GAAKtD,EAClCf,IAAkBqE,EAAO,EAAI,GAAKxD,GAEtCsC,EAAQe,IAAIM,6BAA+B,SAASH,EAAMC,GACtD,IACIb,QAAQgB,MAAM3C,EAAmBuC,EAAMC,IAD3C,QAGI7F,EAAK8C,gBAAgB8C,EAAMC,KAGnCnB,EAAQe,IAAIQ,2BAA6B,SAASL,GAC9CpF,EAAWoF,KAGM,kBAAVJ,GAA0C,oBAAZU,SAA0BV,aAAiBU,SAA4B,oBAARC,KAAsBX,aAAiBW,OAC3IX,EAAQY,MAAMZ,IA7BtB,KAkCuChB,EAlCvC,UAkCkDgB,EAlClD,gCAkCyDd,EAlCzD,sDAkCYW,EAlCZ,EAkCYA,SAAUZ,EAlCtB,EAkCsBA,OAElBzE,EAAOqF,EAASgB,QAChBd,EAAKe,uBAAyB7B,EArClC,kBAuCWzE,GAvCX,6C,sBA0CeuF,Q,OCrPXgB,GAAkB,EACXhB,EAAKiB,8CAAiDC,MAAK,WACpEF,GAAkB,EDOhBvG,EAAK0G,qBCqET,SAASC,EAAYC,GACnB,IAAMC,EAAMC,OAAeD,GAC3B,QAAwBzG,IAApByG,EAAGE,mBAA8D3G,IAAhCyG,EAAGE,aAAH,MAAyBH,GAC5D,KAAM,oBAAsBA,EAAI,IAClC,OAAOC,EAAGE,aAAH,MAAyBH,GA8DlCI,EAAQ,IAAepN,oBAAoBqN,KAE1CA,IAAsB3H,iBAAiB,WAAY,CAClD1C,MAAO,CAEL,CAAE5B,MAAO,0BAA2BC,MAAO,UAE3C,CAAED,MAAO,2CAA4CC,MAAO,WAI5D,CAAED,MAAO,gBAAiBC,MAAO,WAQjC,CAAED,MAAO,kBAAmBC,MAAO,UACnC,CAAED,MAAO,qDAAsDC,MAAO,UAEtE,CAAED,MAAO,OAAQC,MAAO,SAExB,CAAED,MAAO,SAAUC,MAAO,WAG1B,CAAED,MAAO,gBAAiBC,MAAO,YAEjC,CAAED,MAAO,4BAA6BC,MAAO,cAE7C,CAAED,MAAO,0BAA2BC,MAAO,WAE3C,CAAED,MAAO,WAAYqC,QAAQ,GAC7B,CAAErC,MAAO,WAAYwC,QAAQ,IAE/B0J,QAAS,CACP,CAAElM,MAAO,UAAWC,MAAO,UAAWJ,KAAM,SAC5C,CAAEG,MAAO,KAAMC,MAAO,YAExB0D,KAAM,CACJG,iBAAkB,CAAC,WACnBqI,YAAa,Q,IAIXC,E,iDACJC,QAAU,IAAIC,I,KACdC,QAAU,IAAID,I,gDAEd,SAAaE,GACNzM,KAAKsM,QAAQI,IAAID,KACpBzM,KAAKsM,QAAQhG,IAAImG,EAAG,GACpBzM,KAAKwM,QAAQlG,IAAImG,EAAGA,IAKtB,IAFA,IAAME,EAAO,CAACF,GACVG,EAAO5M,KAAKwM,QAAQxC,IAAIyC,GACrBG,IAASD,EAAKA,EAAKpM,OAAS,IACjCoM,EAAK5M,KAAK6M,GACVA,EAAO5M,KAAKwM,QAAQxC,IAAI4C,GAG1B,cAAmBD,EAAnB,gBAAK,IAAME,EAAI,KACb7M,KAAKwM,QAAQlG,IAAIuG,EAAMD,GACzB,OAAOA,I,mBAGT,WAAsB,IAAC,IAAD,0BAAbE,EAAa,yBAAbA,EAAa,gBACpB,GAAoB,IAAhBA,EAAKvM,OAAT,CAEA,IAHoB,EAGdwM,EAAQD,EAAKE,KAAI,SAACP,GAAD,OAAO,EAAKQ,aAAaR,MAE5CS,EAAc,EACdC,EAAW,KACXC,EAAiB,EAPD,cAQDL,GARC,IAQpB,2BAA0B,CAAC,IAAhBH,EAAe,QAClBS,EAASrN,KAAKsM,QAAQtC,IAAI4C,GAChCM,GAAeG,EACXA,EAASD,IACXD,EAAWP,EACXQ,EAAiBC,IAbD,8BAiBpBrN,KAAKsM,QAAQhG,IAAI6G,EAAWD,GAjBR,oBAkBDH,GAlBC,IAkBpB,2BAA0B,CAAC,IAAhBH,EAAe,QACpBA,IAASO,GACXnN,KAAKwM,QAAQlG,IAAIsG,EAAMO,IApBP,oC,KA0BxB,SAASG,EAAaC,EAAeC,EAAyBC,GAC5D,IAD+E,EAEzEC,EAAS,IAAMF,EAAWG,OAAOpN,OAAS,GAE1CqN,EAAc,GAEhBC,EAAa,EAN8D,cAS3DL,EAAWG,QATgD,IAS/E,2BAAuC,CAAC,IAAD,EAA5BG,EAA4B,QAC/BC,EAAwB,GACxBC,EAAyB,GAC3B1N,EAAI,EACJ2N,GAAqB,EACnBC,EAAQV,EAAWW,UAAUnE,IAAI8D,EAAMM,KALR,cAMdF,GANc,IAMrC,2BAA8B,CAAC,IAApBG,EAAmB,QACtBxC,EAAI,EAAIvL,EAAIiN,EAAMe,MACpBC,EAAO,EACPC,EAAO,GAeX,GAdiB,IAAbH,IACoB,IAAbA,EACTE,EAAOC,EAAO,GACQ,IAAbH,EACTE,EAAOC,EAAO,EACQ,IAAbH,IACTJ,EAAoBpC,IAEZ,IAANvL,EACFyN,EAAYhO,KAAZ,YAAsB8L,EAAtB,YAA2B2C,IAE3BT,EAAYhO,KAAZ,YAAsB8L,EAAtB,YAA2B2C,IAC7BR,EAAajO,KAAb,YAAuB8L,EAAvB,YAA4B0C,IAC5BjO,IACI2N,GAAqB,EACvB,OAzBiC,8BA2BrCD,EAAaS,UACbT,EAAajO,KAAK,KAElB6N,EAAY7N,KACV,oBAAoB2O,UAAS,wBAAgC,GAAbb,EAAnB,KAA7B,UACE,sBAAMhC,GAAI,IAAK8C,EAAG,GAAIC,OAAO,QAAQxJ,KAAK,QAA1C,SAAmD0I,EAAMe,QACzD,sBACEC,EAAG,UAAIf,EAAgBC,GAAcpL,KAAK,KAC1CgM,OAAO,QACPG,YAAcxB,EAAMe,OAAS,EAAI,EAAKf,EAAMe,OAAS,EAAI,EAAI,IAC7DlJ,KAAK,8BAGkB,IAAvB6I,GAA4B,qCAC1B,sBACEa,EAAC,YAAOb,EAAP,gBAAgCA,EAAoB,IAApD,gBAA+DA,EAAoB,IAAnF,iBAA+FA,EAA/F,SACDW,OAAO,MACPG,YAAa,EACb3J,KAAK,yBAEP,sBAAMyG,EAAGoC,EAAoB,GAAIU,EAAG,GAAIK,WAAW,SAASJ,OAAO,MAAMxJ,KAAK,MAA9E,iCAhBEyI,IAqBVA,KA7D6E,8BAmE/E,IAHA,IAAMoB,EAAS,IAAM1B,EAAMe,MAAQb,EAAQyB,YAErCC,EAAY,GACTC,EAAI,EAAI7B,EAAM8B,aAAcD,EAAI7B,EAAM+B,SAAUF,GAAK7B,EAAM8B,aAAe9B,EAAMgC,YACvFJ,EAAUpP,KACR,sBACE+O,EAAC,YAAO,IAAMvB,EAAMe,MAAQc,EAA3B,kBAAsC1B,EAAS,IAChDkB,OAAO,2BACPG,YAAa,EACb3J,KAAK,iBAKX,OAAO,sBAAKoK,MAAO,CACjBC,MAAO,OAAQ/B,UADV,UAGJE,GACCH,EAAQiC,SAAW,qCACnB,sBACEZ,EAAC,YAAOG,EAAP,gBAAqBA,EAArB,YAA+BvB,EAAS,IACzCkB,OAAO,MACPG,YAAa,EACb3J,KAAK,gBAEP,sBAAM4J,WAAW,SAASnD,EAAGoD,EAAQN,EAAGjB,EAAS,EAAGkB,OAAO,MAAMxJ,KAAK,MAAtE,SAA6EqI,EAAQkC,iBAEtFR,KAIL,SAASS,EAAkBC,EAA2BC,GACpDC,aAAaC,QAAQ,SAAWH,EAAoB,QAASI,KAAKC,UAAUJ,EAAWK,WACvFJ,aAAaC,QAAQ,SAAWH,EAAoB,cAAeC,EAAWvG,MAqBhF,SAAS6G,EACP5C,EACA6C,GACW,IAAD,gBAC4CA,GAD5C,IACV,2BAAqE,CAAC,IAAD,UAAxDjC,EAAwD,EAAxDA,IAAKkC,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,gBACzBtC,EAAQV,EAAWW,UAAUnE,IAAIoE,GACvC,QAAc/I,IAAV6I,EACF,MAAO,CACLwB,SAAS,EACTR,YAAa,EACbuB,QAAS,UAAYH,EAAU,oDAC/BX,YAAa,UAAYW,EAAU,cAP4B,oBAUvCC,GAVuC,IAUnE,2BAAkC,CAAC,IAAD,yBAAtBG,EAAsB,KAAhBC,EAAgB,KAChC,IAAc,GAAVA,GAEAzC,EAAMwC,KAAUC,EAAO,CACzB,IAAMC,EAAU,CAACC,EAAG,WAAYC,EAAG,MAAOC,EAAG,QACvCC,EAAMJ,EAAQ1C,EAAMwC,IACpBO,EAASL,EAAQD,GACnBF,EAAO,UAAMH,EAAN,eAAoBU,EAApB,kCAAiDC,EAAjD,KACPtB,EAAW,UAAMW,EAAN,sBAA2BW,GAC1C,QAAwB5L,IAApBmL,EAAJ,mBAC2BA,EAD3B,GACGC,EADH,KACYd,EADZ,KAEA,MAAO,CAAED,SAAS,EAAOR,YAAawB,EAAMD,UAASd,iBArBU,gCAD3D,8BA0BV,MAAO,CAAED,SAAS,EAAMR,YAAa,EAAGuB,QAAS,oBAAqBd,YAAa,IAGrF,SAASuB,GAAO7B,EAAsBtK,GACpC,IADmE,EAC7D1E,EAA6B,GAC/B+O,EAAI+B,KAAKC,MAAqB,GAAf/B,GAFgD,cAGnDtK,GAHmD,IAGnE,2BAAmB,CAAC,IAATsM,EAAQ,QACP,MAANA,EACFhR,EAAON,KAAK,CAACqP,EAAG,IACH,MAANiC,EACPhR,EAAON,KAAK,CAACqP,EAAG,IACH,MAANiC,EACPhR,EAAON,KAAK,CAACqP,EAAG,IACH,MAANiC,GACPhR,EAAON,KAAK,CAACqP,GAAI,IACnBA,GAAKC,GAZ4D,8BAcnE,OAAOhP,EAGT,IAAMiR,GAA6B,CAEjC,CACEC,aAAc,OACdtS,KAAM,OACNuS,UAAU,yfAOVC,aAAa,2TAgBbC,cAAe,SAACC,GAId,OAHAA,EAAW5R,KACT,CAAE6R,KAAM,SAAUxD,IAAK,SAAUyD,QAAQ,YAAK,MAAcC,QAAQ,IAE/D,CAAC,WAEVC,eAAgB,iBAAM,CAAC,eACvBC,aAAc,SAACC,EAAczE,GAAf,OAA2C4C,EAAU5C,EAAY,CAC7E,CAAEY,IAAK,aAAckC,QAAS,QAAMC,KAAMW,GAAOe,EAAK5C,aAAc,YAEtEf,MAAO,EACPgB,SAAU,IACVD,aAAc,GACdE,YAAa,GAIf,CACEgC,aAAc,QACdtS,KAAM,gBACNuS,UAAU,4aAaVC,aAAa,+XAabC,cAAe,SAACC,GAKd,OAJAA,EAAW5R,KACT,CAAE6R,KAAM,SAAUxD,IAAK,SAAsByD,QAAQ,YAAK,aAAqBC,QAAQ,GACvF,CAAEF,KAAM,SAAUxD,IAAK,qBAAsByD,QAAQ,YAAK,aAAqBC,QAAQ,IAElF,CAAC,SAAU,uBAEpBC,eAAgB,iBAAM,CAAC,eACvBC,aAAc,SAACC,EAAczE,GAAf,OAA2C4C,EAAU5C,EAAY,CAC7E,CAAEY,IAAK,aAAckC,QAAS,QAAMC,KAAMW,GAAOe,EAAK5C,aAAc,gBAEtEf,MAAO,EACPgB,SAAU,IACVD,aAAc,GACdE,YAAa,GAIf,CACEgC,aAAc,cACdtS,KAAM,cACNuS,UAAU,o1BAYVC,aAAa,k9BAmDbC,cAAe,SAACC,GAMd,OALAA,EAAW5R,KACT,CAAE6R,KAAM,SAAUxD,IAAK,SAAUyD,QAAQ,YAAK,iBAAyBC,QAAQ,GAC/E,CAAEF,KAAM,SAAUxD,IAAK,SAAUyD,QAAQ,YAAK,iBAAyBC,QAAQ,GAC/E,CAAEF,KAAM,SAAUxD,IAAK,SAAUyD,QAAQ,YAAK,iBAAyBC,QAAQ,IAE1E,CAAC,SAAU,SAAU,WAE9BC,eAAgB,iBAAM,CAAC,eAAgB,gBAAiB,eAAgB,cAAe,eAAgB,iBACvGC,aAAc,SAACC,EAAczE,GAAf,OAA2C4C,EAAU5C,EAAY,CAC7E,CAAEY,IAAK,eAAiBkC,QAAS,QAAgBC,KAAMW,GAAOe,EAAK5C,aAAc,kBACjF,CAAEjB,IAAK,gBAAiBkC,QAAS,mBAAgBC,KAAMW,GAAOe,EAAK5C,aAAc,kBACjF,CAAEjB,IAAK,eAAiBkC,QAAS,aAAgBC,KAAMW,GAAOe,EAAK5C,aAAc,kBACjF,CAAEjB,IAAK,cAAiBkC,QAAS,aAAgBC,KAAMW,GAAOe,EAAK5C,aAAc,kBACjF,CAAEjB,IAAK,eAAiBkC,QAAS,aAAgBC,KAAMW,GAAOe,EAAK5C,aAAc,kBACjF,CAAEjB,IAAK,eAAiBkC,QAAS,eAAgBC,KAAMW,GAAOe,EAAK5C,aAAc,qBAEnFf,MAAO,EACPgB,SAAU,IACVD,aAAc,GACdE,YAAa,GAIf,CACEgC,aAAc,QACdtS,KAAM,QACNuS,UAAU,oMAEVC,aAAa,kpBAuBbC,cAAe,SAACC,GASd,OARAA,EAAW5R,KACT,CAAE6R,KAAM,SAAUxD,IAAK,UAAWyD,QAAQ,YAAK,iBAAyBC,QAAQ,GAChF,CAAEF,KAAM,SAAUxD,IAAK,UAAWyD,QAAQ,YAAK,iBAAyBC,QAAQ,GAChF,CAAEF,KAAM,SAAUxD,IAAK,UAAWyD,QAAQ,YAAK,iBAAyBC,QAAQ,GAChF,CAAEF,KAAM,SAAUxD,IAAK,UAAWyD,QAAQ,YAAK,iBAAyBC,QAAQ,GAChF,CAAEF,KAAM,SAAUxD,IAAK,UAAWyD,QAAQ,YAAK,iBAAyBC,QAAQ,GAChF,CAAEF,KAAM,SAAUxD,IAAK,UAAWyD,QAAQ,YAAK,iBAAyBC,QAAQ,IAE3E,CAAC,CAAC,UAAW,UAAW,WAAY,CAAC,UAAW,UAAW,aAEpEC,eAAgB,iBAAM,CAAC,YAAa,YAAa,cACjDC,aAAc,SAACC,EAAczE,GAAf,OAA2C4C,EAAU5C,EAAY,CAC7E,CAAEY,IAAK,YAAakC,QAAS,aAAcC,KAAMW,GAAOe,EAAK5C,aAAc,iBAC3E,CAAEjB,IAAK,YAAakC,QAAS,aAAcC,KAAMW,GAAOe,EAAK5C,aAAc,iBAC3E,CAAEjB,IAAK,YAAakC,QAAS,aAAcC,KAAMW,GAAOe,EAAK5C,aAAc,oBAE7Ef,MAAO,EACPgB,SAAU,IACVD,aAAc,GACdE,YAAa,GAIf,CACEgC,aAAc,YACdtS,KAAM,aACNuS,UAAU,ktCAqBVC,aAAa,8nBA4BbC,cAAe,SAACC,GAOd,OANAA,EAAW5R,KACT,CAAE6R,KAAM,SAAUxD,IAAK,WAAcyD,QAAQ,YAAK,mBAA2BC,QAAQ,GACrF,CAAEF,KAAM,SAAUxD,IAAK,aAAcyD,QAAQ,YAAK,mBAA2BC,QAAQ,GACrF,CAAEF,KAAM,SAAUxD,IAAK,SAAcyD,QAAQ,YAAK,oBAA4BC,QAAQ,GACtF,CAAEF,KAAM,SAAUxD,IAAK,WAAcyD,QAAQ,YAAK,qBAA6BC,QAAQ,IAElF,CAAC,WAAY,aAAc,SAAU,aAE9CC,eAAgB,iBAAM,CAAC,SAAU,aAAc,sBAC/CC,aAAc,SAACC,EAAczE,GAAf,OAA2C4C,EAAU5C,EAAY,CAC7E,CAAEY,IAAK,SAAqBkC,QAAS,eAAqBC,KAAMW,GAAOe,EAAK5C,aAAc,sBAC1F,CAAEjB,IAAK,aAAqBkC,QAAS,mBAAqBC,KAAMW,GAAOe,EAAK5C,aAAc,sBAC1F,CAAEjB,IAAK,oBAAqBkC,QAAS,oBAAqBC,KAAMW,GAAOe,EAAK5C,aAAc,yBAE5Ff,MAAO,EACPgB,SAAU,IACVD,aAAc,GACdE,YAAa,GAIf,CACEgC,aAAc,gBACdtS,KAAM,iBACNuS,UAAU,m+DA8BVC,aAAa,qLASbC,cAAe,SAACC,GAOd,OANAA,EAAW5R,KACT,CAAE6R,KAAM,SAAUxD,IAAK,WAAgByD,QAAQ,YAAK,iGAAyGC,QAAQ,GACrK,CAAEF,KAAM,SAAUxD,IAAK,aAAgByD,QAAQ,YAAK,iGAAyGC,QAAQ,GACrK,CAAEF,KAAM,SAAUxD,IAAK,eAAgByD,QAAQ,YAAK,iGAAyGC,QAAQ,IAGhK,CAAC,WAAY,aAAc,iBAEpCC,eAAgB,iBAAM,CAAC,cACvBC,aAAc,SAACC,EAAczE,GAAf,OAA2C4C,EAAU5C,EAAY,CAC7E,CAAEY,IAAK,YAAakC,QAAS,kBAAmBC,KAAMW,GAAOe,EAAK5C,aAAc,gGAAiGmB,gBAAiB,CAAC,yEAAkH,mBACrT,CAAEpC,IAAK,YAAakC,QAAS,kBAAmBC,KAAMW,GAAOe,EAAK5C,aAAc,gGAAiGmB,gBAAiB,CAAC,6EAAkH,uBACrT,CAAEpC,IAAK,YAAakC,QAAS,kBAAmBC,KAAMW,GAAOe,EAAK5C,aAAc,gGAAiGmB,gBAAiB,CAAC,yEAAkH,mBACrT,CAAEpC,IAAK,YAAakC,QAAS,kBAAmBC,KAAMW,GAAOe,EAAK5C,aAAc,gGAAiGmB,gBAAiB,CAAC,0GAAkH,uBACrT,CAAEpC,IAAK,YAAakC,QAAS,kBAAmBC,KAAMW,GAAOe,EAAK5C,aAAc,gGAAiGmB,gBAAiB,CAAC,0EAAkH,oBACrT,CAAEpC,IAAK,YAAakC,QAAS,kBAAmBC,KAAMW,GAAOe,EAAK5C,aAAc,gGAAiGmB,gBAAiB,CAAC,0GAAkH,uBACrT,CAAEpC,IAAK,YAAakC,QAAS,kBAAmBC,KAAMW,GAAOe,EAAK5C,aAAc,gGAAiGmB,gBAAiB,CAAC,8EAAkH,wBACrT,CAAEpC,IAAK,YAAakC,QAAS,kBAAmBC,KAAMW,GAAOe,EAAK5C,aAAc,gGAAiGmB,gBAAiB,CAAC,uGAAkH,mBACrT,CAAEpC,IAAK,YAAakC,QAAS,kBAAmBC,KAAMW,GAAOe,EAAK5C,aAAc,gGAAiGmB,gBAAiB,CAAC,iHAAkH,wBACrT,CAAEpC,IAAK,YAAakC,QAAS,kBAAmBC,KAAMW,GAAOe,EAAK5C,aAAc,gGAAiGmB,gBAAiB,CAAC,2EAAkH,wBAEvTlC,MAAO,IACPgB,SAAU,KACVD,aAAc,IACdE,YAAa,GAIf,CACEgC,aAAc,OACdtS,KAAM,OACNuS,UAAU,kDACVC,aAAc,sBACdC,cAAe,iBAAM,CAAC,SAAU,uBAChCK,eAAgB,iBAAM,CAAC,cACvBC,aAAc,SAACnG,GAAD,MAAa,CAAE6D,SAAS,EAAOR,YAAa,EAAGuB,QAAS,MAAOd,YAAa,MAC1FrB,MAAO,IACPgB,SAAU,KACVD,aAAc,IACdE,YAAa,GAIf,CACEgC,aAAc,iBACdtS,KAAM,iBACNuS,UAAU,gEAEVC,aAAc,sBACdC,cAAe,iBAAM,CAAC,SAAU,uBAChCK,eAAgB,iBAAM,CAAC,cACvBC,aAAc,SAACnG,GAAD,MAAa,CAAE6D,SAAS,EAAOR,YAAa,EAAGuB,QAAS,MAAOd,YAAa,MAC1FrB,MAAO,EACPgB,SAAU,IACVD,aAAc,GACdE,YAAa,IAuCX2C,G,kDACJ,WAAYlP,GAA0B,IAAD,8BACnC,cAAMA,IACDpC,MAAQ,CAAE2I,KAAMvG,EAAMyO,cAFQ,E,0CAKrC,WAAU,IAAD,OACP,OAAO,gCACL,cAAC,aAAD,CACEd,MAAO3Q,KAAKY,MAAM2I,KAClB4I,QAAS,CACP1Q,KAAM,SACN2Q,MAAO,WACPC,aAAa,EACb7P,WAAY,EACZ8P,cAAc,EACdC,UAAWvS,KAAKgD,MAAMwP,eAAexS,OAEvCyS,eAAgB,SAACC,EAAQ7S,EAAM0J,GAC7B,EAAKoJ,SAAS,CAAEpJ,YAGnBvJ,KAAKgD,MAAM4P,iBAAmB5S,KAAKY,MAAM2I,MACxC,qBAAKiG,MAAO,CACVqD,SAAU,WACVC,MAAO,GACPC,OAAQ,GACRC,WAAY,OACZC,cAAe,OACfC,OAAQ,EACRC,MAAO,MACPC,QAAS,IARX,sD,GAvBiBC,IAAMC,eAg9BhBC,G,kDAx5Bb,WAAYvQ,GAAY,IAAD,uBACrB,cAAMA,IAJRwQ,iBAGuB,IAFvBC,cAAgBJ,IAAMK,YAEC,EAiOvBC,UAAY,SAACpK,GACX,IAAMuC,EAAMC,OAAeD,GAC3BA,EAAG8H,IAAM,SACT,IAAIC,EAAoB,GAElBlC,EAA2B,GAE7BmC,EAAS,EACb,SAASC,IAEP,SADAD,GACcE,WAGhBlI,EAAGmI,SAASC,IAAMpI,EAAGqI,IAAIC,UAAU,OACnCtI,EAAGmI,SAASI,IAAMvI,EAAGqI,IAAIC,UAAU,OAEnCtI,EAAGmI,SAASK,QAAU,SAACrV,GACrB,OAAO6M,EAAGqI,IAAII,UAAUtV,GAAQ8U,KAElCjI,EAAGmI,SAASK,QAAQE,YAAc,CAAC,QACnC1I,EAAGmI,SAASK,QAAQG,UAAY,CAAC,OACjC3I,EAAGmI,SAASK,QAAQI,WAAa,EAEjC5I,EAAGmI,SAASU,KAAO,SAACC,EAAWC,EAAYnV,GACzC,QAAa2F,IAATuP,QAAgCvP,IAAVwP,EACxB,KAAM,gHAMR,GALAD,EAAO9I,EAAGqI,IAAII,UAAUK,GACxBC,EAAQ/I,EAAGqI,IAAII,UAAUM,QAEVxP,KADf3F,EAASoM,EAAGqI,IAAII,UAAU7U,MAExBA,EAAS,OACS,kBAATkV,EAAmB,KAAM,sDACpC,GAAqB,kBAAVC,EAAoB,KAAM,uDACrC,GAAsB,kBAAXnV,EAAqB,KAAM,wDACtCiS,EAAW5R,KAAK,CAAE6R,KAAM,MAAOkD,QAAQ,EAAOF,OAAMC,QAAOnV,YAE7DoM,EAAGmI,SAASU,KAAKH,YAAc,CAAC,OAAQ,QAAS,UACjD1I,EAAGmI,SAASU,KAAKF,UAAY,MAACpP,OAAWA,OAAWA,GACpDyG,EAAGmI,SAASU,KAAKD,WAAa,EAE9B5I,EAAGmI,SAASc,KAAO,SAACH,EAAWC,EAAYnV,GACzC,QAAa2F,IAATuP,QAAgCvP,IAAVwP,EACxB,KAAM,gHAMR,GALAD,EAAO9I,EAAGqI,IAAII,UAAUK,GACxBC,EAAQ/I,EAAGqI,IAAII,UAAUM,QAEVxP,KADf3F,EAASoM,EAAGqI,IAAII,UAAU7U,MAExBA,EAAS,OACS,kBAATkV,EAAmB,KAAM,sDACpC,GAAqB,kBAAVC,EAAoB,KAAM,uDACrC,GAAsB,kBAAXnV,EAAqB,KAAM,wDACtCiS,EAAW5R,KAAK,CAAE6R,KAAM,MAAOkD,QAAQ,EAAMF,OAAMC,QAAOnV,YAE5DoM,EAAGmI,SAASc,KAAKP,YAAc,CAAC,OAAQ,QAAS,UACjD1I,EAAGmI,SAASc,KAAKN,UAAY,MAACpP,OAAWA,OAAWA,GACpDyG,EAAGmI,SAASc,KAAKL,WAAa,EAE9B5I,EAAGmI,SAASnG,MAAQ,SAACe,EAAeT,GAGlC,GAFAS,EAAQ/C,EAAGqI,IAAII,UAAU1F,GACzBT,EAAMtC,EAAGqI,IAAII,UAAUnG,GACF,kBAAVS,EAAoB,KAAM,kDACrC,GAAmB,kBAART,EAAkB,KAAM,gDACnCuD,EAAW5R,KAAK,CAAE6R,KAAM,QAAS/C,QAAOT,SAE1CtC,EAAGmI,SAASnG,MAAM0G,YAAc,CAAC,QAAS,OAC1C1I,EAAGmI,SAASnG,MAAM4G,WAAa,EAE/B5I,EAAGmI,SAASe,mBAAqB,SAAC5G,GAEhC,GAAmB,kBADnBA,EAAMtC,EAAGqI,IAAII,UAAUnG,IACM,KAAM,sDACnCuD,EAAW5R,KAAK,CAAE6R,KAAM,gBAAiBqD,UAAW,OAAQ7G,SAE9DtC,EAAGmI,SAASe,mBAAmBR,YAAc,CAAC,OAC9C1I,EAAGmI,SAASe,mBAAmBN,WAAa,EAE5C5I,EAAGmI,SAASiB,iBAAmB,SAAC9G,GAE9B,GAAmB,kBADnBA,EAAMtC,EAAGqI,IAAII,UAAUnG,IACM,KAAM,oDACnCuD,EAAW5R,KAAK,CAAE6R,KAAM,gBAAiBqD,UAAW,KAAM7G,SAE5DtC,EAAGmI,SAASiB,iBAAiBV,YAAc,CAAC,OAC5C1I,EAAGmI,SAASiB,iBAAiBR,WAAa,EAE1C5I,EAAGmI,SAASkB,cAAgB,SAACC,EAAWC,GAGtC,GAFAD,EAAOtJ,EAAGqI,IAAII,UAAUa,GACxBC,EAAOvJ,EAAGqI,IAAII,UAAUc,GACJ,kBAATD,EAAmB,KAAM,yDACpC,GAAoB,kBAATC,EAAmB,KAAM,yDACpC1D,EAAW5R,KAAK,CAAE6R,KAAM,OAAQ0D,KAAM,CAACF,EAAMC,MAE/CvJ,EAAGmI,SAASkB,cAAcX,YAAc,CAAC,OAAQ,QACjD1I,EAAGmI,SAASkB,cAAcT,WAAa,EAYvC5I,EAAGmI,SAASsB,OAAS,SAAC1D,EAAc5S,GAClC,IAAMmP,EAAMtC,EAAGqI,IAAII,UAAUtV,GAAQ8U,IACrC,QAAgB1O,IAAZwM,EACF,KAAM,kDAER,IAAMC,GADND,EAAU/F,EAAGqI,IAAII,UAAU1C,GAAS2D,eACbC,SAAS,OAC5B3D,IACFD,EAAUA,EAAQvN,MAAM,GAAI,IAPkB,oBAQhCuN,GARgC,IAQhD,gCAAWR,EAAX,QACE,GAAU,MAANA,GAAmB,MAANA,GAAmB,MAANA,EAC5B,KAAM,0HAVsC,8BAYhD,OADAM,EAAW5R,KAAK,CAAE6R,KAAM,SAAUxD,MAAKyD,UAASC,WACzChG,EAAGqI,IAAIC,UAAUhG,IAE1BtC,EAAGmI,SAASsB,OAAOf,YAAc,CAAC,OAAQ,QAC1C1I,EAAGmI,SAASsB,OAAOd,UAAY,MAACpP,EAAW,UAC3CyG,EAAGmI,SAASsB,OAAOb,WAAa,EAEhC5I,EAAGmI,SAASyB,UAAY,SAACC,EAAmBC,EAAkBC,EAAmBC,EAAuBC,GAMtG,GALAJ,EAAe7J,EAAGqI,IAAII,UAAUoB,GAChCC,EAAc9J,EAAGqI,IAAII,UAAUqB,GAC/BC,EAAe/J,EAAGqI,IAAII,UAAUsB,GAChCC,EAAmBhK,EAAGqI,IAAII,UAAUuB,GACpCC,EAAWjK,EAAGqI,IAAII,UAAUwB,GACxB,CAACJ,EAAcC,EAAaC,EAAcC,GAAkBE,cAAS3Q,GACvE,KAAM,6JACR,GAAIuQ,EAAYrV,SAAWsV,EAAatV,OACtC,KAAM,kHACRoR,EAAW5R,KAAK,CACd6R,KAAM,OACNmE,SAAU,IAAI/P,YAAY+P,GAC1BJ,eACAC,cACAC,eACAC,sBAGJhK,EAAGmI,SAASyB,UAAUlB,YAAc,CAAC,eAAgB,cAAe,eAAgB,mBAAoB,YACxG1I,EAAGmI,SAASyB,UAAUjB,UAAY,MAACpP,OAAWA,OAAWA,OAAWA,EAAW,IAC/EyG,EAAGmI,SAASyB,UAAUhB,WAAa,EAEnC5I,EAAGmI,SAASgC,iBAAmB,WAC7B,IAAMX,EAAO,EAAK1U,MAAMsV,aAAaxE,cAAcC,GACnD,OAAO7F,EAAGqI,IAAIC,UAAUkB,IAE1BxJ,EAAGmI,SAASgC,iBAAiBzB,YAAc,GAC3C1I,EAAGmI,SAASgC,iBAAiBvB,WAAa,EAE1C5I,EAAGmI,SAASkC,kBAAoB,WAC9B,IAAMb,EAAO,EAAK1U,MAAMsV,aAAanE,eAAeJ,GAGpD,OADAA,EAAW5R,KAAK,CAAE6R,KAAM,QAAS0D,SAC1BxJ,EAAGqI,IAAIC,UAAUkB,IAE1BxJ,EAAGmI,SAASkC,kBAAkB3B,YAAc,GAC5C1I,EAAGmI,SAASkC,kBAAkBzB,WAAa,EAE3C5I,EAAGsK,UAAU,CACXC,OAAQ,SAAC5N,GACPoL,EAAQ9T,KAAK0I,EAAIuL,aAGnB/K,KAAM2C,IAGQE,EAAGwK,SAASC,gBAAe,WACzC,OAAOzK,EAAG0K,mBAAmB,WAAW,EAAOjN,GAAM,MAE7CmC,MACR,SAAC+K,GAEC,IAAIC,EAAiB7C,EAAQjR,KAAK,IAC9B8T,IAAmBA,EAAejB,SAAS,QAC7CiB,GAAkB,MACpB,EAAK/D,SAAS,CAAE+D,iBAAgBC,UAAW,SAC3C,EAAKC,SAASjF,MAEhB,SAACkF,GACC,EAAKlE,SAAS,CAAE+D,eAAgB7C,EAAQjR,KAAK,IAAM,KAAOiU,EAAI7C,WAAY8C,UAAW,GAAIH,UAAW,aAtZnF,EAmbvBI,aAAe,kBAAe,EAAKC,YAAc,EAAKpE,gBAnb/B,EAqbvBA,aAAe,kBAAc,EAAKY,YAAYxJ,IAAI,EAAKpJ,MAAMsV,aAAa3E,cAAehI,MAjbvF,EAAKiK,YAAc,IAAIjH,IACvB,EAAK0K,kCAEL,EAAKrW,MAAQ,CACXsW,KAAM,eACNhB,aAAc,KAEdQ,eAAgB,GAChBI,UAAW,GACXtJ,WAAY,KACZC,QAAS,KACTkJ,UAAW,OACXQ,UAAU,EACVC,WAAW,GAGbrL,OAAOsL,WAAa,SAACC,GACnB,EAAKC,gBAGP,IAAIC,EAAa,EACXC,EAAgB,SAzBD,OA0BrBC,SAASC,iBAAiB,WAAW,SAACC,GAChCA,EAAIC,MAAQJ,EAAcD,KAC5BA,GACkBC,EAAclX,QAC9B,EAAKoS,SAAS,CAAEyE,WAAW,IAE7BI,EAAa,KAhCI,E,mEAqCvB,WACExX,KAAKwT,YAAc,IAAIjH,IADS,oBAEZ+E,IAFY,IAEhC,2BAAsC,CAAC,IAA5B/D,EAA2B,QAC9B4C,EAAWF,KAAK6H,MACpB/H,aAAagI,QAAQ,SAAWxK,EAAMgE,aAAe,UAClD,iEAEChI,EAAOwG,aAAagI,QAAQ,SAAWxK,EAAMgE,aAAe,gBAAkBhE,EAAMkE,aAC1FzR,KAAKwT,YAAYlN,IAAIiH,EAAMgE,aAAc,CAAEpB,WAAU5G,UARvB,iC,yBAYlC,SAAYyO,EAAiBvH,GAC3B,IAAMwH,EAAajY,KAAKgX,UAAUkB,MAAM,MAAMF,EAAU,GACxDhY,KAAK2S,SAAS,CACZ+D,eAAe,KAAD,OAAOuB,EAAP,6BAAsCD,EAAtC,aAAkDvH,O,sBAIpE,SAASkB,GACP,IAAMwG,EAAYC,YAAYC,MAE9B1G,EAAU,sBACLA,GADK,CAER,CAACC,KAAM,SAAUxD,IAAK,MAAOyD,QAAS,CAAC,KAAMC,QAAQ,GACrD,CAACF,KAAM,SAAUxD,IAAK,MAAOyD,QAAS,CAAC,KAAMC,QAAQ,KAGvD,IATiC,EAS3BwD,EAAO,IAAIgD,IAAY,CAAC,MAAO,QAC/BC,EAAa,IAAID,IACjB3K,EAAmB,GACnB6K,EAAmB,IAAInM,EAZI,cAaTsF,GAbS,IAajC,2BAAoC,CAAC,IAA1B8G,EAAyB,QAClC,OAAQA,EAAU7G,MAChB,IAAK,MACH,cAAkB,CAAC6G,EAAU7D,KAAM6D,EAAU5D,MAAO4D,EAAU/Y,QAA9D,gBAAK,IAAM0O,EAAG,KACZkH,EAAKoD,IAAItK,GACX,MACF,IAAK,OAAL,oBACoBqK,EAAUnD,MAD9B,IACE,gCAAWlH,EAAX,QACEkH,EAAKoD,IAAItK,IAFb,gCAGEoK,EAAiBG,MAAjB,MAAAH,EAAgB,YAAUC,EAAUnD,OACpC,MACF,IAAK,QACH3H,EAAO5N,KAAK0Y,GACZnD,EAAKoD,IAAID,EAAUrK,KACnBmK,EAAWG,IAAID,EAAUrK,KACzB,MACF,IAAK,QAAL,oBACoBqK,EAAUnD,MAD9B,IACE,gCAAWlH,EAAX,QACEmK,EAAWG,IAAItK,IAFnB,gCAGE,MACF,IAAK,gBACL,IAAK,SACL,IAAK,SACHkH,EAAKoD,IAAID,EAAUrK,OApCQ,gCA2CjC,GAAK5C,EAAL,CAMA,IAjDiC,EAiD3BoN,EAAsB,GACtBC,EAAa,IAAItM,IAlDU,cAmDf+I,GAnDe,IAmDjC,2BAAwB,CAAC,IAAdlH,EAAa,QAChB0K,EAAmBN,EAAiBvL,aAAamB,GAClDyK,EAAWnM,IAAIoM,IAClBD,EAAWvS,IAAIwS,EAAkBD,EAAWE,MAE9CF,EAAWvS,IAAI8H,EAAKyK,EAAW7O,IAAI8O,KAxDJ,oDA0DTnH,GA1DS,IA0DjC,2BAAoC,CAAC,IAA1B8G,EAAyB,QAClC,OAAQA,EAAU7G,MAChB,IAAK,MACHgH,EAAU7Y,KACR,GACC0Y,EAAU3D,OACX+D,EAAW7O,IAAIyO,EAAU7D,MACzBiE,EAAW7O,IAAIyO,EAAU5D,OACzBgE,EAAW7O,IAAIyO,EAAU/Y,SAE3B,MACF,IAAK,SACHkZ,EAAU7Y,KAAV,MAAA6Y,EAAS,CACP,EACAC,EAAW7O,IAAIyO,EAAUrK,MACxBqK,EAAU3G,OACX2G,EAAU5G,QAAQtR,QAJX,mBAKJ,YAAIkY,EAAU5G,SAAS7E,KAAI,SAACqE,GAAD,MAAQ,CAAC,EAAK,EAAG,EAAK,EAAG,EAAK,GAAGA,SAEjE,MACF,IAAK,gBACHuH,EAAU7Y,KACR,EACA,CAAC,GAAM,EAAG,KAAQ,GAAG0Y,EAAUxD,WAC/B4D,EAAW7O,IAAIyO,EAAUrK,MAE3B,MACF,IAAK,OACHwK,EAAU7Y,KAAV,MAAA6Y,EAAS,CACP,EACAH,EAAU9C,aAAapV,OACvBkY,EAAU7C,YAAYrV,OACtBsY,EAAW7O,IAAIyO,EAAU3C,kBACzB2C,EAAU1C,SAASxV,QALZ,mBAMJkY,EAAU1C,UANN,YAOJ0C,EAAU9C,aAAa3I,KAAI,SAACoB,GAAD,OAASyK,EAAW7O,IAAIoE,OAP/C,YAQJqK,EAAU7C,YAAY5I,KAAI,SAACoB,GAAD,OAASyK,EAAW7O,IAAIoE,OAR9C,YASJqK,EAAU5C,aAAa7I,KAAI,SAACoB,GAAD,OAASyK,EAAW7O,IAAIoE,SAExD,MACF,QACE,SAEJwK,EAAU7Y,KAAK,YArGgB,gCAsHjC,IAfA,IAGMiZ,EAAcnS,EAHP,IAAIb,YAAY4S,GACE,IAAI5S,YAAYb,MAAM8T,KAAKV,GAAYvL,KAAI,SAACoB,GAAD,OAASyK,EAAW7O,IAAIoE,OAKhGyK,EAAWE,KACX/Y,KAAKY,MAAMsV,aAAa5G,SACxBtP,KAAKY,MAAMsV,aAAa7G,cAEpB6J,EAAelR,IAEfmR,EAAuB,GAGpB7Y,EAAI,EAAGA,EAAI4Y,EAAa3Y,OAAQD,GAAK,EAAG,CAC/C,IAAMuB,EAAQqX,EAAa5Y,GACrBuH,EAAMqR,EAAa5Y,EAAI,GACvB4N,EAAQ8K,EAAY1U,MAAMzC,EAAOA,EAAQgG,GAC/CsR,EAAOpZ,KAAKmO,GAEd,IA5HiC,EA4H3BkL,ED59BInU,EAAKoU,0BC69BTC,GAAiD,IAA1BF,EAIvBjL,EAAY,IAAI5B,IAClBjM,EAAI,EAlIyB,cAmIfiY,GAnIe,IAmIjC,gCAAWnK,EAAX,QACED,EAAU7H,IAAI8H,EAAK+K,EAAO7Y,OApIK,gCAyIjC,IAAMiZ,EAAUnB,YAAYC,MAAQF,EAChCrB,EAAS,2CAAuC3F,KAAKC,MAAMmI,GAAlD,2BAA6E5H,EAAWpR,OAAS,EAAjG,kBAA4G+U,EAAKyD,KAAjH,KACPvL,EAA0B,CAC9BmE,WAAYA,EAAWpR,OACvB+U,KAAK,YAAKA,GACVnH,YACAR,SACA2L,uBACAF,wBAGI3L,EAAoB6L,EACxB,CACE5J,SAAS,EACTR,YAAakK,EACb3I,QAAS,wDACTd,YAAa,6BAEb3P,KAAKY,MAAMsV,aAAalE,aAAahS,KAAKY,MAAMsV,aAAc1I,GAElE,GAAIC,EAAQiC,QAAS,CACnB,IAAMI,EAAa9P,KAAKwT,YAAYxJ,IAAIhK,KAAKY,MAAMsV,aAAa3E,cAChEzB,EAAWK,SAASqJ,YAAa,EACjC5J,EAAkB5P,KAAKY,MAAMsV,aAAa3E,aAAczB,GACxD9P,KAAK2S,SAAS,CAAEgE,UAAW,cAE3BG,GAAa,qBAAuBrJ,EAAQgD,QAG9CzQ,KAAK2S,SAAS,CAAEmE,YAAWtJ,aAAYC,iBA1HrCzN,KAAK2S,SAAS,CAAEmE,UAAW,sC,2BAuT/B,SAAcvJ,GACZvN,KAAK2S,SAAS,CACZuE,KAAM,QACNhB,aAAc3I,EAEdmJ,eAAgB,GAChBI,UAAW,kDACXtJ,WAAY,KACZC,QAAS,KACTkJ,UAAW,SAQb,IAAM7G,EAAa9P,KAAKwT,YAAYxJ,IAAIuD,EAAMgE,cAC9CzB,EAAWK,SAASsJ,YAAa,EACjC7J,EAAkBrC,EAAMgE,aAAczB,GAEtC/D,OAAO2N,QAAQC,UAAU,CAACzC,KAAM,QAAShB,aAAc3I,EAAMgE,cAAe,2B,0BAO9E,WACOvR,KAAK+W,iBAAkBhL,OAAO6N,QAAQ,0EACzC5Z,KAAK2S,SAAS,CAAEuE,KAAM,mB,qBAG1B,SAAQ3N,GAC6B,OAA/BvJ,KAAKyT,cAAc7R,SACrB5B,KAAKyT,cAAc7R,QAAQ+Q,SAAS,CAAEpJ,W,qBAG1C,WACE,OAAmC,OAA/BvJ,KAAKyT,cAAc7R,QACd5B,KAAKyT,cAAc7R,QAAQhB,MAAM2I,KACnC,2D,oBAGT,WAAU,IAAD,OACP,GAAwB,iBAApBvJ,KAAKY,MAAMsW,KAAyB,CACtC,IAAI2C,GAAS,EAEb,OAAO,sBAAKrK,MAAO,CACjBC,MAAO,OACP/B,OAAQ,QACRyF,MAAO,QACP2G,WAAY,YACZC,QAAS,OACTC,eAAgB,SAChBC,UAAW,SACXC,SAAU,QARL,UAUL,sBAAK1K,MAAO,CACV2K,UAAW,IADb,UAGE,sBAAM3K,MAAO,CAAC0K,SAAU,QAAxB,mCAA6D,uBAC7D,uBAJF,kBAKiB,uBACf,qBAAK1K,MAAO,CAAEuK,QAAS,gBAAvB,SACE,qBAAKvK,MAAO,CAAEuK,QAAS,OAAQK,cAAe,SAAUD,UAAW,IAAnE,SACG7I,GAAiBtE,KAAI,SAACO,EAAOjN,GAC5B,IAAMwP,EAAa,EAAK0D,YAAYxJ,IAAIuD,EAAMgE,cAExClR,EAAS,sBAEbmP,MAAO,CACL0K,SAAU,OACVG,OAAQ,EACRC,QAAS,GACT7K,MAAO,IACPoD,SAAU,YAEZ0H,UAAWV,EAAS,eAAiB,cACrCW,QAASX,EAAS,kBAAM,MAAO,kBAAM,EAAKY,cAAclN,IAV3C,UAYZsM,EAAS,MAAQtM,EAAMtO,MACtB4a,IAAW/J,EAAWK,SAASsJ,YAAc,qBAAKjK,MAAO,CACzDqD,SAAU,WACVqH,SAAU,MACV/G,MAAO,MACPuH,KAAM,MACNC,IAAK,KACLjM,UAAW,iBANkC,kBAU9CoB,EAAWK,SAASqJ,YAAc,qBAAKhK,MAAO,CAC7CqD,SAAU,WACVqH,SAAU,OACV/G,MAAO,QACPuH,KAAM,OACNC,IAAK,MACLjM,UAAW,yBANsB,sBAtB9BpO,GAqCP,OAHKwP,EAAWK,SAASqJ,YAAe,EAAK5Y,MAAMwW,YACjDyC,GAAS,GAEJxZ,YAMf,qBAAKmP,MAAO,CAAEqD,SAAU,WAAY6H,KAAM,GAAI3H,OAAQ,IAAtD,8CAGA,qBACEvD,MAAO,CAAEqD,SAAU,WAAYC,MAAO,GAAIC,OAAQ,GAAIuH,QAAS,IAC/DC,UAAU,cACVC,QAAS,WACHzO,OAAO6N,QAAQ,yGA1kC7B7J,aAAa6K,QA4kCD,EAAK3D,kCACL,EAAK4D,gBAPX,wCAgBJ,IAgBIC,EAAmBC,SAAShL,aAAagI,QAAQ,WAAa,OAC1CgD,SAAShL,aAAagI,QAAQ,WAAa,OACnE,OAAO,sBAAKvI,MAAO,CACjBuK,QAAS,QADJ,UAIL,eAAC,IAAD,CACE7B,MAAM,WACN8C,QAAS,IACTC,YAAaH,EACbI,SAAU,SAACnC,GAAD,OAAUhJ,aAAaC,QAAQ,SAAU+I,EAAK/E,aACxDmH,aA3BoB,CACtBC,WAAY,QACZ3L,MAAO,MACP4L,SAAU,MACVC,OAAQ,aACR5N,OAAQ,OACRwF,OAAQ,IAgBR,UAOE,sBAAK1D,MAAO,CAAEqD,SAAU,YAAxB,UAEE,sBAAKrD,MAAO,CAAEuK,QAAS,OAAQwB,WAAY,SAAUH,WAAY,OAAQI,aAAc,iBAAkB9N,OAAQ,IAAjH,UACE,qBACE8B,MAAO,CACLuD,OAAQ,GACRD,MAAO,IAETyH,UAAU,aACVC,QAAS,kBAAM,EAAKjD,gBANtB,oBAUA,qBACE/H,MAAO,CACLuD,OAAQ,GACRD,MAAO,IAETyH,UAAU,aACVC,QAAS,kBAAM,EAAK7H,SAAS,CAAEwE,UAAW,EAAKvW,MAAMuW,YANvD,wBAUA,qBACE3H,MAAO,CACLuD,OAAQ,GACRD,MAAO,IAETyH,UAAU,aACVC,QAAS,WACHzO,OAAO6N,QAAQ,iEACjB,EAAK6B,QAAQ,EAAK7a,MAAMsV,aAAazE,eAR3C,2BAqBF,cAAC,GAAD,CACEiK,IAAK1b,KAAKyT,cACVhC,aAAczR,KAAKwT,YAAYxJ,IAAIhK,KAAKY,MAAMsV,aAAa3E,cAAehI,KAC1EqJ,aAAc5S,KAAK4S,aACnBJ,eAAgB,SAACmJ,GAAD,MAAsC,CACpD,aAAc,SAACC,GACb,EAAKjI,UAAUgI,EAAoB/a,MAAM2I,OAG3C,SAAU,SAACqS,GACT,IAAM9L,EAAa,EAAK0D,YAAYxJ,IAAI,EAAKpJ,MAAMsV,aAAa3E,cAChEzB,EAAWvG,KAAOoS,EAAoB/a,MAAM2I,KAC5CqG,EAAkB,EAAKhP,MAAMsV,aAAa3E,aAAczB,GACxD,EAAK+K,sBAqBb,8BAUE,sBACErL,MAAO,CACLuK,QAAS,OACTK,cAAe,UAHnB,UAME,qBAAK5K,MAAO,CACVC,MAAO,OACP/B,OAAQ,OACRmO,gBAAiB,OACjB1I,MAAO,QACP2G,WAAY,YACZgC,SAAU,UANZ,SAQE,qBAAKtM,MAAO,CAAE6K,OAAQ,IAAtB,SAa6B,OAA1Bra,KAAKY,MAAM4M,YAQVF,EAAatN,KAAKY,MAAMsV,aAAclW,KAAKY,MAAM4M,WAAYxN,KAAKY,MAAM6M,aAK9E,sBAAK+B,MAAO,CACVqM,gBAAiB7b,KAAKY,MAAM+V,UAC5BxD,MAAO,QACP2G,WAAY,YACZrK,MAAO,OACP/B,OAAQ,OACRqM,QAAS,QANX,UASE,sBAAKvK,MAAO,CAAE8K,QAAS,GAAI7K,MAAO,IAAKoM,gBAAiB,OAAQE,UAAW,UAA3E,UACE,4BAAI/b,KAAKY,MAAMsV,aAAajX,OAC5B,mBAAGuQ,MAAO,CAACwM,WAAY,YAAvB,SACGhc,KAAKY,MAAMsV,aAAa1E,eAI7B,qBACEhC,MAAO,CAAEC,MAAO,EAAGoM,gBAAiB,UAGtC,sBAAKrM,MAAO,CACV6K,OAAQ,GACR2B,WAAY,WACZ7I,MAAO,QACP2I,SAAU,SACVrM,MAAO,QALT,UAOGzP,KAAKY,MAAM8V,gBAAkB,sDACd,uBACd,sBAAMlH,MAAO,CAAC2D,MAAO,aAArB,SAAoCnT,KAAKY,MAAM8V,iBAAsB,uBACrE,0BAED1W,KAAKY,MAAMkW,wBAQI,SAAzB9W,KAAKY,MAAM+V,WAAwB,qBAAKnH,MAAO,CAC9CqD,SAAU,WACVC,MAAO,GACPC,OAAQ,GACRuH,QAAS,GACTJ,SAAU,OACV+B,UAAW,sBACV1B,UAAU,cAAcC,QAAS,WAClC,EAAKjD,gBAR6B,sBAapC,sBAAK/H,MAAO,CACVqD,SAAU,WACVpD,MAAO,IACP/B,OAAQ,OACRwO,UAAW,aACXD,UAAW,qBACXnJ,MAAO9S,KAAKY,MAAMuW,SAAW,IAAM,EACnCjE,OAAQ,IACR2I,gBAAiB,OACjBM,WAAY,aACZ7B,QAAS,GACT5L,UAAW,wBACXqN,UAAW,UAZb,UAcE,qBAAKvM,MAAO,CAAEqD,SAAU,SAAU8H,IAAK,GAAvC,SACE,qBACEnL,MAAO,CAAEqD,SAAU,WAAY8H,IAAK,EAAG7H,MAAO,EAAGoH,SAAU,OAAQI,QAAS,GAC5EC,UAAU,cACVC,QAAS,kBAAM,EAAK7H,SAAS,CAAEwE,UAAU,KAH3C,sBASF,sBAAM3H,MAAO,CAAE0K,SAAU,OAAQkC,WAAY,QAA7C,wBACA,sBAAK5M,MAAO,CAAE2K,UAAW,IAAzB,mQAKE,sBAAK3K,MAAO,CAAE6M,WAAY,GAAIC,aAAc,IAA5C,UACE,qBAAK9M,MAAO,CAAE4M,WAAY,OAAQlC,SAAU,QAA5C,gEACA,sBAAK1K,MAAO,CAAE6M,WAAY,IAA1B,yEAEE,qBAAK7M,MAAO,CAAE6M,WAAY,IAA1B,qEAFF,oDAMmD,uCANnD,2BAQE,qBAAK7M,MAAO,CAAE6M,WAAY,IAA1B,6WARF,0SA0BA,qBAAK7M,MAAO,CAAE4M,WAAY,OAAQlC,SAAU,QAA5C,gEACA,sBAAK1K,MAAO,CAAE6M,WAAY,IAA1B,wEAEE,qBAAK7M,MAAO,CAAE6M,WAAY,IAA1B,sEAFF,oDAMmD,uCANnD,gFAUA,qBAAK7M,MAAO,CAAE4M,WAAY,OAAQlC,SAAU,QAA5C,8BACA,qBAAK1K,MAAO,CAAE6M,WAAY,IAA1B,yFAIA,qBAAK7M,MAAO,CAAE4M,WAAY,OAAQlC,SAAU,QAA5C,iDACA,qBAAK1K,MAAO,CAAE6M,WAAY,IAA1B,oFAlDJ,yEAyDE,sBAAK7M,MAAO,CAAE6M,WAAY,GAAIC,aAAc,IAA5C,UACE,qBAAK9M,MAAO,CAAE4M,WAAY,OAAQlC,SAAU,QAA5C,yCACA,qBAAK1K,MAAO,CAAE6M,WAAY,IAA1B,8FAIA,qBAAK7M,MAAO,CAAE4M,WAAY,OAAQlC,SAAU,QAA5C,yCACA,sBAAK1K,MAAO,CAAE6M,WAAY,IAA1B,2TAME,qBAAK7M,MAAO,CAAE6M,WAAY,IAA1B,sNAtEN,8DAmFE,sBAAK7M,MAAO,CAAE6M,WAAY,GAAIC,aAAc,IAA5C,UACE,qBAAK9M,MAAO,CAAE4M,WAAY,OAAQlC,SAAU,QAA5C,8mBAiBA,sBAAK1K,MAAO,CAAE6M,WAAY,IAA1B,kHAEY,gDAFZ,uCAIK,oDAJL,0DAIyF,gDAJzF,kCAKK,oDALL,iFAKgH,+CALhH,aAKkJ,gDALlJ,oBAMM,+CANN,+KAUE,qBAAK7M,MAAO,CAAE6M,WAAY,IAA1B,geAVF,uVA+BW,+DA/BX,iCA+B2F,qDA/B3F,SA+B+H,yF,GAl5BzHhJ,IAAMC,eC14BTiJ,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/Q,MAAK,YAAkD,IAA/CgR,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFvF,SAASwF,eAAe,SAM1BX,O","file":"static/js/main.7fe1d3b6.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Hacked briefly by Peter Schmidt-Nielsen to make it easily requireable.\n\nexport function addDefineSimpleMode(CodeMirror) {\n    \"use strict\";\n  \n    CodeMirror.defineSimpleMode = function(name, states) {\n      CodeMirror.defineMode(name, function(config) {\n        return CodeMirror.simpleMode(config, states);\n      });\n    };\n  \n    CodeMirror.simpleMode = function(config, states) {\n      ensureState(states, \"start\");\n      var states_ = {}, meta = states.meta || {}, hasIndentation = false;\n      for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n        var list = states_[state] = [], orig = states[state];\n        for (var i = 0; i < orig.length; i++) {\n          var data = orig[i];\n          list.push(new Rule(data, states));\n          if (data.indent || data.dedent) hasIndentation = true;\n        }\n      }\n      var mode = {\n        startState: function() {\n          return {state: \"start\", pending: null,\n                  local: null, localState: null,\n                  indent: hasIndentation ? [] : null};\n        },\n        copyState: function(state) {\n          var s = {state: state.state, pending: state.pending,\n                   local: state.local, localState: null,\n                   indent: state.indent && state.indent.slice(0)};\n          if (state.localState)\n            s.localState = CodeMirror.copyState(state.local.mode, state.localState);\n          if (state.stack)\n            s.stack = state.stack.slice(0);\n          for (var pers = state.persistentStates; pers; pers = pers.next)\n            s.persistentStates = {mode: pers.mode,\n                                  spec: pers.spec,\n                                  state: pers.state == state.localState ? s.localState : CodeMirror.copyState(pers.mode, pers.state),\n                                  next: s.persistentStates};\n          return s;\n        },\n        token: tokenFunction(states_, config),\n        innerMode: function(state) { return state.local && {mode: state.local.mode, state: state.localState}; },\n        indent: indentFunction(states_, meta)\n      };\n      if (meta) for (var prop in meta) if (meta.hasOwnProperty(prop))\n        mode[prop] = meta[prop];\n      return mode;\n    };\n  \n    function ensureState(states, name) {\n      if (!states.hasOwnProperty(name))\n        throw new Error(\"Undefined state \" + name + \" in simple mode\");\n    }\n  \n    function toRegex(val, caret) {\n      if (!val) return /(?:)/;\n      var flags = \"\";\n      if (val instanceof RegExp) {\n        if (val.ignoreCase) flags = \"i\";\n        val = val.source;\n      } else {\n        val = String(val);\n      }\n      return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n    }\n  \n    function asToken(val) {\n      if (!val) return null;\n      if (val.apply) return val\n      if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n      var result = [];\n      for (var i = 0; i < val.length; i++)\n        result.push(val[i] && val[i].replace(/\\./g, \" \"));\n      return result;\n    }\n  \n    function Rule(data, states) {\n      if (data.next || data.push) ensureState(states, data.next || data.push);\n      this.regex = toRegex(data.regex);\n      this.token = asToken(data.token);\n      this.data = data;\n    }\n  \n    function tokenFunction(states, config) {\n      return function(stream, state) {\n        if (state.pending) {\n          var pend = state.pending.shift();\n          if (state.pending.length == 0) state.pending = null;\n          stream.pos += pend.text.length;\n          return pend.token;\n        }\n  \n        if (state.local) {\n          if (state.local.end && stream.match(state.local.end)) {\n            var tok = state.local.endToken || null;\n            state.local = state.localState = null;\n            return tok;\n          } else {\n            var tok = state.local.mode.token(stream, state.localState), m;\n            if (state.local.endScan && (m = state.local.endScan.exec(stream.current())))\n              stream.pos = stream.start + m.index;\n            return tok;\n          }\n        }\n  \n        var curState = states[state.state];\n        for (var i = 0; i < curState.length; i++) {\n          var rule = curState[i];\n          var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n          if (matches) {\n            if (rule.data.next) {\n              state.state = rule.data.next;\n            } else if (rule.data.push) {\n              (state.stack || (state.stack = [])).push(state.state);\n              state.state = rule.data.push;\n            } else if (rule.data.pop && state.stack && state.stack.length) {\n              state.state = state.stack.pop();\n            }\n  \n            if (rule.data.mode)\n              enterLocalMode(config, state, rule.data.mode, rule.token);\n            if (rule.data.indent)\n              state.indent.push(stream.indentation() + config.indentUnit);\n            if (rule.data.dedent)\n              state.indent.pop();\n            var token = rule.token\n            if (token && token.apply) token = token(matches)\n            if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n              state.pending = [];\n              for (var j = 2; j < matches.length; j++)\n                if (matches[j])\n                  state.pending.push({text: matches[j], token: rule.token[j - 1]});\n              stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n              return token[0];\n            } else if (token && token.join) {\n              return token[0];\n            } else {\n              return token;\n            }\n          }\n        }\n        stream.next();\n        return null;\n      };\n    }\n  \n    function cmp(a, b) {\n      if (a === b) return true;\n      if (!a || typeof a != \"object\" || !b || typeof b != \"object\") return false;\n      var props = 0;\n      for (var prop in a) if (a.hasOwnProperty(prop)) {\n        if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop])) return false;\n        props++;\n      }\n      for (var prop in b) if (b.hasOwnProperty(prop)) props--;\n      return props == 0;\n    }\n  \n    function enterLocalMode(config, state, spec, token) {\n      var pers;\n      if (spec.persistent) for (var p = state.persistentStates; p && !pers; p = p.next)\n        if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode) pers = p;\n      var mode = pers ? pers.mode : spec.mode || CodeMirror.getMode(config, spec.spec);\n      var lState = pers ? pers.state : CodeMirror.startState(mode);\n      if (spec.persistent && !pers)\n        state.persistentStates = {mode: mode, spec: spec.spec, state: lState, next: state.persistentStates};\n  \n      state.localState = lState;\n      state.local = {mode: mode,\n                     end: spec.end && toRegex(spec.end),\n                     endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),\n                     endToken: token && token.join ? token[token.length - 1] : token};\n    }\n  \n    function indexOf(val, arr) {\n      for (var i = 0; i < arr.length; i++) if (arr[i] === val) return true;\n    }\n  \n    function indentFunction(states, meta) {\n      return function(state, textAfter, line) {\n        if (state.local && state.local.mode.indent)\n          return state.local.mode.indent(state.localState, textAfter, line);\n        if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1)\n          return CodeMirror.Pass;\n  \n        var pos = state.indent.length - 1, rules = states[state.state];\n        scan: for (;;) {\n          for (var i = 0; i < rules.length; i++) {\n            var rule = rules[i];\n            if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n              var m = rule.regex.exec(textAfter);\n              if (m && m[0]) {\n                pos--;\n                if (rule.next || rule.push) rules = states[rule.next || rule.push];\n                textAfter = textAfter.slice(m[0].length);\n                continue scan;\n              }\n            }\n          }\n          break;\n        }\n        return pos < 0 ? 0 : state.indent[pos];\n      };\n    }\n  };\n  \n","\nlet wasm;\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n*/\nexport function init_panic_hook() {\n    wasm.init_panic_hook();\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {Uint32Array} description\n* @param {Uint32Array} nets_to_trace\n* @param {number} net_count\n* @param {number} duration\n* @param {number} clock_divider\n* @returns {Uint8Array}\n*/\nexport function perform_simulation(description, nets_to_trace, net_count, duration, clock_divider) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passArray32ToWasm0(description, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray32ToWasm0(nets_to_trace, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.perform_simulation(retptr, ptr0, len0, ptr1, len1, net_count, duration, clock_divider);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* @returns {Uint32Array}\n*/\nexport function get_indices() {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.get_indices(retptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU32FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4);\n        return v0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @returns {number}\n*/\nexport function get_first_shoot_through() {\n    var ret = wasm.get_first_shoot_through();\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n// Line deleted.\n    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_new_59cb74e423758ede = function() {\n        var ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n        var ret = getObject(arg1).stack;\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n        try {\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(arg0, arg1);\n        }\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","import React from 'react';\nimport './App.css';\nimport { Controlled as ControlledCodeMirror } from 'react-codemirror2';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/mode/python/python';\nimport RawCodeMirror from 'codemirror';\nimport SplitPane from 'react-split-pane';\n\nimport init, {\n  get_indices,\n  perform_simulation,\n  init_panic_hook,\n  get_first_shoot_through,\n} from './wasm-build/libsnpspice.js';\n\nlet wasmInitialized = false;\nlet wasm = init(process.env.PUBLIC_URL + \"/libsnpspice_bg.wasm\").then(() => {\n  wasmInitialized = true;\n  init_panic_hook();\n});\n\ninterface EFet {\n  kind: 'fet';\n  isPfet: boolean;\n  gate: string;\n  drain: string;\n  source: string;\n}\n\ninterface EPullResistor {\n  kind: 'pull_resistor';\n  direction: 'up' | 'down';\n  net: string;\n}\n\ninterface EProbe {\n  kind: 'probe';\n  label: string;\n  net: string;\n}\n\ninterface ETrace {\n  kind: 'trace';\n  nets: string[];\n}\n\ninterface EWire {\n  kind: 'wire';\n  nets: string[];\n}\n\ninterface EButton {\n  kind: 'button';\n  net: string;\n}\n\ninterface ESignal {\n  kind: 'signal';\n  net: string;\n  pattern: ('0' | '1' | 'z')[];\n  repeat: boolean;\n}\n\ninterface ESram {\n  kind: 'sram';\n  contents: Uint32Array;\n  address_nets: string[];\n  bus_in_nets: string[];\n  bus_out_nets: string[];\n  write_enable_net: string;\n}\n\ntype EComponent = (\n  EFet |\n  EPullResistor |\n  EProbe |\n  ETrace |\n  EWire |\n  EButton |\n  ESignal |\n  ESram\n);\n\n//import createPlotlyComponent from \"react-plotly.js/factory\";\n\n//// Importing plotly is a little bit of a nightmare.\n//// If we just try to directly `import Plot from \"react-plotly.js\"` then webpack runs out of memory trying to build.\n//const Plotly = require('plotly.js/lib/core');\n//Plotly.register([\n//    require('plotly.js/lib/heatmap'),\n//]);\n//const Plot = createPlotlyComponent(Plotly);\n\nfunction builtinRead(x: string) {\n  const Sk = (window as any).Sk;\n  if (Sk.builtinFiles === undefined || Sk.builtinFiles[\"files\"][x] === undefined)\n    throw \"File not found: '\" + x + \"'\";\n  return Sk.builtinFiles[\"files\"][x];\n}\n\nconst pyPrefix = `\nvdd = \"vdd\";\ngnd = \"gnd\";\n\ndef nfet(gate, drain, source):\n  pass\n\ndef pfet(gate, drain, source):\n  pass\n`;\n\nconst startingCode = `# This is \"Python\" (Skulpt).\n# To build up your solution to the puzzle simply call the functions documented below to emit circuit components.\n#\n# You have the following functions:\n#\n#   new_net(name_prefix: Optional[str] = 'net') -> Net\n#     Creates a new unique net, with an optional name prefix.\n#\n#   nfet(gate: Net, drain: Net, source: Optional[Net])\n#     Emits an n-channel FET into the circuit (pulls drain down to source when gate is high).\n#     If the source is omitted it defaults to gnd.\n#     It is a CMOS design rule violation if source can somehow be pulled high.\n#\n#   pfet(gate: Net, drain: Net, source: Optional[Net])\n#     Emits a p-channel FET into the circuit (pulls drain up to source when gate is low).\n#     If the source is omitted it defaults to vdd.\n#     It is a CMOS design rule violation if source can somehow be pulled low.\n#\n#   probe(label: str, net: Net)\n#     Marks the net to be plotted. Has no electrical effect.\n#\n#   wire_together(nets: List[Net])\n#     Electrically connects all of the listed nets.\n#\n#   button(label: Optional[str]) -> Net\n#     Emits a one-terminal push button, and return the button's output net.\n#     When the button is pushed the net is pulled high, and when released pulled low.\n#\n#   signal(pattern: str) -> Net\n#     Emits a signal generator component, and return the generator's output net.\n#     The pattern must be made of 0s, 1s, and zs, and may optionally end with ... to indicate that the pattern should repeat.\n#     If the\n#     The value z indicates that the signal shouldn't drive the output (high Z).\n#     Examples:\n#       clock = signal('01...') # Creates a clock signal that toggles every time step.\n#       output = signal('zzz1z') # Waits three time steps, then drives high, then stops driving forever.\n#\n# The net gnd is always low, and the net vdd is always high.\n\n# Create an inverter.\noutput = new_net()\nclock = signal('01...')\nnfet(clock, output, gnd)\npfet(clock, output, vdd)\nprobe('clock', clock)\nprobe('inverter output', output)\n`\n\nrequire(\"./simple.js\").addDefineSimpleMode(RawCodeMirror);\n\n(RawCodeMirror as any).defineSimpleMode(\"complang\", {\n  start: [\n    // Match strings.\n    { regex: /\"(?:[^\\\\]|\\\\.)*?(?:\"|$)/, token: \"string\" },\n    // Match keywords.\n    { regex: /(?:pfet|nfet|probe|wire|button|signal)\\b/, token: \"keyword\" },\n    // Match initialization and driving.\n    //{regex: /~|<-/, token: \"drive\"},\n    // Match built-ins.\n    { regex: /(?:vdd|gnd)\\b/, token: \"builtin\" },\n    /*\n    {regex: /(?:Slider|Selector|Checkbox|Uniform|Gaussian|Gamma|Beta|Frechet|PoissonProcess|WienerProcess|WienerDerivative|WienerDerivativeUnstable|D|Integrate|exp|log|sin|cos|sqrt|abs|floor|ceil|round|min|max|select|len|str|addDeriv|subDeriv|index_interpolating|print)\\b/, token: \"builtin\"},\n    {regex: /(?:globalTime|globalStepSize|e|pi|true|false|backend|tolerance|stepsize|maxplotpoints|integrator|simtime|minstep|maxstep|mcsamples|mctraces|mcenvelope|randomseed|processscale|mcpercentile|prefix|unitname|redrawperiod|crossoverprob|diffweight|populationsize|maxsteps|patience|patiencefactor|objectiveaggregation)\\b/, token: \"atom\"},\n    */\n    // Match embedded javascript.\n    //{regex: /javascript\\s{/, token: \"meta\", mode: {spec: \"javascript\", end: /}/}},\n    // Match numbers.\n    { regex: /[01]+[.][.][.]/i, token: \"number\" },\n    { regex: /0x[a-f\\d]+|[-+]?(?:\\.\\d+|\\d+\\.?\\d*)(?:e[-+]?\\d+)?/i, token: \"number\" },\n    // Match units.\n    { regex: /`.*`/, token: \"units\" },\n    // Handle comments.\n    { regex: /\\/\\/.*/, token: \"comment\" },\n    //{regex: /\\/\\*/, token: \"comment\", next: \"comment\"},\n    // Match operators.\n    { regex: /[-+\\/*=<>!~]+/, token: \"operator\" },\n    // Match compile-time variables.\n    { regex: /\\$[a-zA-Z_][a-zA-Z0-9_']*/, token: \"compilevar\" },\n    // Match variables.\n    { regex: /[a-zA-Z_][a-zA-Z0-9_']*/, token: \"neutral\" },\n    // Indent and dedent on list/dict literals.\n    { regex: /[\\{\\[\\(]/, indent: true },\n    { regex: /[\\}\\]\\)]/, dedent: true },\n  ],\n  comment: [\n    { regex: /.*?\\*\\//, token: \"comment\", next: \"start\" },\n    { regex: /.*/, token: \"comment\" }\n  ],\n  meta: {\n    dontIndentStates: [\"comment\"],\n    lineComment: \"//\",\n  },\n});\n\nclass UnionFind<Key> {\n  weights = new Map<Key, number>();\n  parents = new Map<Key, Key>();\n\n  canonicalize(k: Key): Key {\n    if (!this.weights.has(k)) {\n      this.weights.set(k, 1);\n      this.parents.set(k, k);\n    }\n\n    const path = [k];\n    let root = this.parents.get(k)!;\n    while (root !== path[path.length - 1]) {\n      path.push(root);\n      root = this.parents.get(root)!;\n    }\n\n    for (const node of path)\n      this.parents.set(node, root);\n    return root;\n  }\n\n  union(...keys: Key[]) {\n    if (keys.length === 0)\n      return;\n    const roots = keys.map((k) => this.canonicalize(k));\n    // Find the heaviest.\n    let totalWeight = 0;\n    let heaviest = null as unknown as Key;\n    let heaviestWeight = 0;\n    for (const root of roots) {\n      const weight = this.weights.get(root)!;\n      totalWeight += weight;\n      if (weight > heaviestWeight) {\n        heaviest = root;\n        heaviestWeight = weight;\n      }\n    }\n    // Reweight and reparent.\n    this.weights.set(heaviest!, totalWeight);\n    for (const root of roots) {\n      if (root !== heaviest) {\n        this.parents.set(root, heaviest);\n      }\n    }\n  }\n}\n\nfunction renderTraces(level: ILevel, simResults: ISimResults, grading: IGrading) {\n  const width = 800;\n  const height = 30 * (simResults.probes.length + 1);\n\n  const svgContents = [];\n\n  let probeIndex = 0;\n  //const xStep = 5;\n\n  for (const probe of simResults.probes) {\n    const forwardPass: string[] = [];\n    const backwardPass: string[] = [];\n    let i = 0;\n    let shootThroughStart = -1;\n    const trace = simResults.netTraces.get(probe.net)!;\n    for (const traceVal of trace) {\n      const x = 3 + i * level.xStep;\n      let yMin = 3;\n      let yMax = 27;\n      if (traceVal === 0) {\n      } else if (traceVal === 1) {\n        yMin = yMax = 27;\n      } else if (traceVal === 2) {\n        yMin = yMax = 3;\n      } else if (traceVal === 3) {\n        shootThroughStart = x;\n      }\n      if (i === 0)\n        forwardPass.push(`M ${x} ${yMax}`);\n      else\n        forwardPass.push(`L ${x} ${yMax}`);\n      backwardPass.push(`L ${x} ${yMin}`);\n      i++;\n      if (shootThroughStart >= 0)\n        break;\n    }\n    backwardPass.reverse();\n    backwardPass.push('Z');\n\n    svgContents.push(\n      <g key={probeIndex} transform={`translate(140 ${probeIndex * 30})`}>\n        <text x={-140} y={20} stroke='white' fill='white'>{probe.label}</text>\n        <path\n          d={[...forwardPass, ...backwardPass].join(' ')}\n          stroke='white'\n          strokeWidth={ level.xStep >= 5 ? 3 : (level.xStep >= 4 ? 2 : 1.5) }\n          fill='rgba(255, 255, 255, 0.3)'\n        />\n        {\n          shootThroughStart !== -1 && <>\n            <path\n              d={`M ${shootThroughStart} 3 L ${shootThroughStart + 110} 3 L ${shootThroughStart + 110} 27 L ${shootThroughStart} 27 Z`}\n              stroke='red'\n              strokeWidth={3}\n              fill='rgba(255, 0, 0, 0.3)'\n            />\n            <text x={shootThroughStart + 55} y={20} textAnchor='middle' stroke='red' fill='red'>Shoot through!</text>\n          </>\n        }\n      </g>\n    );\n    probeIndex++;\n  }\n\n  const errorX = 143 + level.xStep * grading.failureTime;\n\n  const gridLines = [];\n  for (let t = 1 + level.clockDivider; t < level.simSteps; t += level.clockDivider * level.tickSpacing) {\n    gridLines.push(\n      <path\n        d={`M ${143 + level.xStep * t} 0 l 0 ${height - 30}`}\n        stroke='rgba(255, 255, 255, 0.2)'\n        strokeWidth={2}\n        fill='transparent'\n      />\n    );\n  }\n\n  return <svg style={{\n    width: '100%', height,\n  }}>\n    {svgContents}\n    {!grading.success && <>\n      <path\n        d={`M ${errorX} 0 L ${errorX} ${height - 20}`}\n        stroke='red'\n        strokeWidth={2}\n        fill='transparent'\n      />\n      <text textAnchor='middle' x={errorX} y={height - 5} stroke='red' fill='red'>{grading.miniMessage}</text>\n    </>}\n    {gridLines}\n  </svg>;\n}\n\nfunction persistLevelState(levelInternalName: string, levelState: ILevelState) {\n  localStorage.setItem('level-' + levelInternalName + '-meta', JSON.stringify(levelState.metadata));\n  localStorage.setItem('level-' + levelInternalName + '-saved-code', levelState.code);\n}\n\nfunction resetGameState() {\n  localStorage.clear();\n}\n\ninterface ILevel {\n  internalName: string;\n  name: string;\n  levelDesc: string;\n  startingCode: string;\n  makeInputNets: (components: EComponent[]) => any[];\n  makeOutputNets: (components: EComponent[]) => any[];\n  gradeResults: (self: ILevel, simResults: ISimResults) => IGrading;\n  xStep: number;\n  simSteps: number;\n  clockDivider: number;\n  tickSpacing: number;\n}\n\nfunction doGrading(\n  simResults: ISimResults,\n  tracesToGrade: { net: string, netName: string, reqs: [number, number][], failureMessages?: string[] }[],\n): IGrading {\n  for (const { net, netName, reqs, failureMessages } of tracesToGrade) {\n    const trace = simResults.netTraces.get(net)!;\n    if (trace === undefined) {\n      return {\n        success: false,\n        failureTime: 0,\n        message: 'Signal ' + netName + ' is undefined. Are you calling get_level_outputs?',\n        miniMessage: 'Signal ' + netName + ' undefined',\n      };\n    }\n    for (const [time, value] of reqs) {\n      if (value == -1)\n        continue;\n      if (trace[time] !== value) {\n        const mapping = {0: 'undriven', 1: 'low', 2: 'high'} as any;\n        const got = mapping[trace[time]];\n        const wanted = mapping[value];\n        let message = `${netName} is ${got}, but should have been ${wanted}.`;\n        let miniMessage = `${netName} should be ${wanted}`;\n        if (failureMessages !== undefined)\n          [message, miniMessage] = failureMessages;\n        return { success: false, failureTime: time, message, miniMessage };\n      }\n    }\n  }\n  return { success: true, failureTime: 0, message: 'All tests passed!', miniMessage: '' };\n}\n\nfunction reqSeq(clockDivider: number, s: string): [number, number][] {\n  const result: [number, number][] = [];\n  let t = Math.round(clockDivider * 0.8);\n  for (const c of s) {\n    if (c === 'z')\n      result.push([t, 0]);\n    else if (c === '0')\n      result.push([t, 1]);\n    else if (c === '1')\n      result.push([t, 2]);\n    else if (c === 'x')\n      result.push([t, -1]);\n    t += clockDivider;\n  }\n  return result;\n}\n\nconst globalLevelsList: ILevel[] = [\n  // ============================== FETs ==============================\n  {\n    internalName: 'fets',\n    name: 'FETs',\n    levelDesc: `Welcome to make-a-microprocessor, where you use FETs to solve a series of puzzles.\n\nWrite your \"Python\" program in the left pane, calling functions to make electrical components. Run your program by hitting ctrl + enter in the code pane.\n\nTo get a list of electrical components and code to construct them click on the \"Parts List\" button in the top left.\n\nYour goal in this first level is to use two FETs to drive the \\`not_A\\` net to be high when \\`A\\` is low, and vice versa (an inverter/not gate).`,\n    startingCode: `# Your Python code here.\n\n# The nets vdd and gnd are built in, and are always 1 and 0 respectively.\nprobe(\"Power\", vdd)\nprobe(\"Ground\", gnd)\n\nA, = get_level_inputs()\nnot_A, = get_level_outputs()\n\nprobe(\"A\", A)\nprobe(\"¬A\", not_A)\n\n# Hint:\n# nfet(gate, drain, source)\n# pfet(gate, drain, source)\n`,\n    makeInputNets: (components: EComponent[]) => {\n      components.push(\n        { kind: 'signal', net: '_net_A', pattern: [...'01'] as any, repeat: true },\n      );\n      return ['_net_A'];\n    },\n    makeOutputNets: () => ['_net_not_A'],\n    gradeResults: (self: ILevel, simResults: ISimResults) => doGrading(simResults, [\n      { net: '_net_not_A', netName: '¬A', reqs: reqSeq(self.clockDivider, '1010') },\n    ]),\n    xStep: 5,\n    simSteps: 400,\n    clockDivider: 10,\n    tickSpacing: 1,\n  },\n\n  // ============================== High-Z Output ==============================\n  {\n    internalName: 'highz',\n    name: 'High-Z Output',\n    levelDesc: `A component's output is said to be high Z (high impedance) when it isn't driven by the component. \\\nIn this level you must construct a gated inverter that takes a second \\`output_enable\\` signal. \\\nYour gated inverter must drive the output if and only if \\`output_enable\\` is high.\n\nSpecifically, your component's truth table must be:\n\n  A | OE | out\n  -------------\n  0 | 0  |  Z\n  1 | 0  |  Z\n  0 | 1  |  1\n  1 | 1  |  0\n`,\n    startingCode: `A, output_enable = get_level_inputs()\nnot_A, = get_level_outputs()\n\nprobe(\"Output enable\", output_enable)\nprobe(\"A\", A)\nprobe(\"¬A\", not_A)\n\n# Hint: You can create your own signals for testing purposes.\ntest_signal = signal(\"001z10...\")\nprobe(\"Test signal\", test_signal)\n\n# You might also want to check out new_net() and wire_together(net1, net2) in the Parts List.\n`,\n    makeInputNets: (components: EComponent[]) => {\n      components.push(\n        { kind: 'signal', net: '_net_A',             pattern: [...'z01001010'] as any, repeat: false },\n        { kind: 'signal', net: '_net_output_enable', pattern: [...'000011100'] as any, repeat: false },\n      );\n      return ['_net_A', '_net_output_enable'];\n    },\n    makeOutputNets: () => ['_net_not_A'],\n    gradeResults: (self: ILevel, simResults: ISimResults) => doGrading(simResults, [\n      { net: '_net_not_A', netName: '¬A', reqs: reqSeq(self.clockDivider, 'zzzz101z') },\n    ]),\n    xStep: 5,\n    simSteps: 400,\n    clockDivider: 10,\n    tickSpacing: 1,\n  },\n\n  // ============================== Logic Gates ==============================\n  {\n    internalName: 'logic_gates',\n    name: 'Logic Gates',\n    levelDesc: `We will now create logic gates. Implement each of the listed gate functions.\n\nThese definitions will be extremely useful, so you may wish to copy some or all of them to later levels as well.\n\nAll your logic gate implementations must drive their output even if an input is undriven (high Z) so long as the other input(s) are sufficient to determine the output. \\\nFor example, your AND implementation must drive the output low if one input is low and the other is undriven.\n\nDo not worry if your gate implementations produce garbage outputs for a small amount of time after their inputs switch. \\\nThis is a normal part of combinational logic, and is known as the propagation delay. Some nomenclature:\n\n  Propagation delay: Max time from an input change to output stabilizing.\n  Contamination delay: Min time from an input change to output change.`,\n    startingCode: `\ndef not_gate(x):\n    r = new_net()\n    ...\n    return r\n\ndef nand_gate(x, y):\n    r = new_net()\n    ...\n    return r\n\ndef and_gate(x, y):\n    r = new_net()\n    ...\n    return r\n\ndef or_gate(x, y):\n    r = new_net()\n    ...\n    return r\n\ndef xor_gate(x, y):\n    r = new_net()\n    ...\n    return r\n\ndef mux_gate(select, x, y):\n    r = new_net()\n    ...\n    return r\n\nA, B, C = get_level_inputs()\nnot_out, nand_out, and_out, or_out, xor_out, mux_out = get_level_outputs()\n\nprobe(\"A\", A)\nprobe(\"B\", B)\nprobe(\"C\", C)\nprobe(\"¬A\", not_out)\nprobe(\"¬(A ∧ B)\", nand_out)\nprobe(\"A ∧ B\", and_out)\nprobe(\"A ∨ B\", or_out)\nprobe(\"A ⊕ B\", xor_out)\nprobe(\"mux(C, A, B)\", mux_out)\n\nwire_together(not_gate(A), not_out)\nwire_together(nand_gate(A, B), nand_out)\nwire_together(and_gate(A, B), and_out)\nwire_together(or_gate(A, B), or_out)\nwire_together(xor_gate(A, B), xor_out)\nwire_together(mux_gate(C, A, B), mux_out)\n`,\n    makeInputNets: (components: EComponent[]) => {\n      components.push(\n        { kind: 'signal', net: '_net_A', pattern: [...'01010101zz01z'] as any, repeat: false },\n        { kind: 'signal', net: '_net_B', pattern: [...'0011001101zzz'] as any, repeat: false },\n        { kind: 'signal', net: '_net_C', pattern: [...'000011110000z'] as any, repeat: false },\n      );\n      return ['_net_A', '_net_B', '_net_C'];\n    },\n    makeOutputNets: () => ['_net_not_out', '_net_nand_out', '_net_and_out', '_net_or_out', '_net_xor_out', '_net_mux_out'],\n    gradeResults: (self: ILevel, simResults: ISimResults) => doGrading(simResults, [\n      { net: '_net_not_out',  netName: '¬A',           reqs: reqSeq(self.clockDivider, '10101010zz10z') },\n      { net: '_net_nand_out', netName: '¬(A ∧ B)',     reqs: reqSeq(self.clockDivider, '111011101z1zz') },\n      { net: '_net_and_out',  netName: 'A ∧ B',        reqs: reqSeq(self.clockDivider, '000100010z0zz') },\n      { net: '_net_or_out',   netName: 'A ∨ B',        reqs: reqSeq(self.clockDivider, '01110111z1z1z') },\n      { net: '_net_xor_out',  netName: 'A ⊕ B',        reqs: reqSeq(self.clockDivider, '01100110zzzzz') },\n      { net: '_net_mux_out',  netName: 'mux(C, A, B)', reqs: reqSeq(self.clockDivider, '01010011zz01z') },\n    ]),\n    xStep: 4,\n    simSteps: 400,\n    clockDivider: 10,\n    tickSpacing: 1,\n  },\n\n  // ============================== Adder ==============================\n  {\n    internalName: 'adder',\n    name: 'Adder',\n    levelDesc: `Your goal is to implement a 3-bit + 3-bit to 3-bit two's complement adder (throwing away the carry bit). \\\nThe numbers are all little-endian, and thus the first bit in a list is the lowest order.`,\n    startingCode: `\ndef adder(a: \"List[Net]\", b: \"List[Net]\") -> \"List[Net]\":\n    assert len(a) == len(b)\n    result = [new_net() for _ in range(len(a))]\n    # Inputs are little endian: a[0] is the lowest order bit.\n    ...\n    return result\n\nA_nets, B_nets = get_level_inputs()\noutput_nets = get_level_outputs()\n\nfor i, n in enumerate(A_nets):\n    probe(\"A[%i]\" % i, n)\nfor i, n in enumerate(B_nets):\n    probe(\"B[%i]\" % i, n)\nfor i, n in enumerate(output_nets):\n    probe(\"(A + B)[%i]\" % i, n)\n\n# Use our adder function, then wire it up to the outputs.\nresult = adder(A_nets, B_nets)\nfor n1, n2 in zip(output_nets, result):\n    wire_together(n1, n2)\n`,\n    makeInputNets: (components: EComponent[]) => {\n      components.push(\n        { kind: 'signal', net: '_net_A0', pattern: [...'000111111111z'] as any, repeat: false },\n        { kind: 'signal', net: '_net_A1', pattern: [...'000000000111z'] as any, repeat: false },\n        { kind: 'signal', net: '_net_A2', pattern: [...'000000000000z'] as any, repeat: false },\n        { kind: 'signal', net: '_net_B0', pattern: [...'000000111111z'] as any, repeat: false },\n        { kind: 'signal', net: '_net_B1', pattern: [...'000000000000z'] as any, repeat: false },\n        { kind: 'signal', net: '_net_B2', pattern: [...'000000000111z'] as any, repeat: false },\n      );\n      return [['_net_A0', '_net_A1', '_net_A2'], ['_net_B0', '_net_B1', '_net_B2']];\n    },\n    makeOutputNets: () => ['_net_sum0', '_net_sum1', '_net_sum2'],\n    gradeResults: (self: ILevel, simResults: ISimResults) => doGrading(simResults, [\n      { net: '_net_sum0', netName: '(A + B)[0]', reqs: reqSeq(self.clockDivider, 'xx0xx1xx0xx0') },\n      { net: '_net_sum1', netName: '(A + B)[1]', reqs: reqSeq(self.clockDivider, 'xx0xx0xx1xx0') },\n      { net: '_net_sum2', netName: '(A + B)[2]', reqs: reqSeq(self.clockDivider, 'xx0xx0xx0xx0') },\n    ]),\n    xStep: 3,\n    simSteps: 400,\n    clockDivider: 10,\n    tickSpacing: 1,\n  },\n\n  // ============================== Flip-Flops ==============================\n  {\n    internalName: 'flipflops',\n    name: 'Flip-Flops',\n    levelDesc: `Your goal is to implement three components that each store one bit of data:\n\nSet-reset latch (SR latch):\nThe SR latch has two inputs: set and reset, and two outputs: Q and ¬Q. \\\nWhen set is high and reset low, Q immediately goes high and ¬Q low. \\\nWhen reset is high and set is low, Q immediately goes low and ¬Q high. \\\nWhen both set and reset are both low the output state holds the last value.\n\nD flip-flop based register:\nThe register has two inputs, D and clk, and two outputs, Q and ¬Q. \\\nThe register stores a single bit, which it outputs to Q and ¬Q at all times. \\\nThe behavior is that on the rising edge of the clk signal the register samples D, and sets the bit of state equal to it.\n\n(Hint: You can use two SR latches to make this register.)\n\nDon't fret if your register can give the wrong output (or even enter funny states where the output oscillates) if the D signal changes too close to the rising clock edge. \\\nYour register will have a characteristic setup time and hold time:\n\n  Setup time: Min time that D must have its target value *before* the rising clock edge to avoid malfunction.\n  Hold time: Min time that D must hold its target value *after* the rising clock edge to avoid malfunction.\n`,\n    startingCode: `\ndef sr_latch(s, r):\n    q, not_q = new_net(), new_net()\n    ...\n    return q, not_q\n\ndef register(d, clk):\n    q, not_q = new_net(), new_net()\n    ...\n    return q, not_q\n\nset, reset, d, clk = get_level_inputs()\nq, not_q, register_out = get_level_outputs()\n\nfor a, b in zip(sr_latch(set, reset), (q, not_q)):\n    wire_together(a, b)\n\nwire_together(register(d, clk)[0], register_out)\n\nprobe(\"SR latch's set\", set)\nprobe(\"SR latch's reset\", reset)\nprobe(\"SR latch's Q\", q)\nprobe(\"SR latch's ¬Q\", not_q)\n\nprobe(\"Register's D\", d)\nprobe(\"Register's clk\", clk)\nprobe(\"Register's output\", register_out)\n`,\n    makeInputNets: (components: EComponent[]) => {\n      components.push(\n        { kind: 'signal', net: '_net_set',   pattern: [...'010000000100000'] as any, repeat: false },\n        { kind: 'signal', net: '_net_reset', pattern: [...'000001000000010'] as any, repeat: false },\n        { kind: 'signal', net: '_net_d',     pattern: [...'0000011000000110'] as any, repeat: false },\n        { kind: 'signal', net: '_net_clk',   pattern: [...'00110011001100110'] as any, repeat: false },\n      );\n      return ['_net_set', '_net_reset', '_net_d', '_net_clk'];\n    },\n    makeOutputNets: () => ['_net_q', '_net_not_q', '_net_register_out'],\n    gradeResults: (self: ILevel, simResults: ISimResults) => doGrading(simResults, [\n      { net: '_net_q',            netName: \"SR latch's Q\",      reqs: reqSeq(self.clockDivider, 'xx111x000x111x000') },\n      { net: '_net_not_q',        netName: \"SR latch's ¬Q\",     reqs: reqSeq(self.clockDivider, 'xx000x111x000x111') },\n      { net: '_net_register_out', netName: \"Register's output\", reqs: reqSeq(self.clockDivider, 'xxx000x111x000x11') },\n    ]),\n    xStep: 3,\n    simSteps: 400,\n    clockDivider: 10,\n    tickSpacing: 1,\n  },\n\n  // ============================== State machines ==============================\n  {\n    internalName: 'state_machine',\n    name: 'State Machines',\n    levelDesc: `This level is much harder than all previous. \\\nYour goal will be to implement a circuit that takes in decimal digits one at a time over a serial bus, and outputs if the number is a multiple of seven. \\\nOn each rising clock edge you must read the \\`reset\\` and \\`data_in\\` lines, and update your state and the output line. \\\nYou will receive decimal digits as sets of four bits, encoded in big-endian, transmitted over four consecutive clock cycles.\n\nLet us use strings to represent possible inputs over the serial bus to your circuit. \\\nWe will denote a cycle in which \\`reset\\` is high by \"R\", and otherwise denote the value of \\`data_in\\` by either \"0\", or \"1\". \\\nTherefore, \"R0000\" will denote the input in which the clock has five rising edges, the first where \\`reset\\` is high \\\n(and therefore \\`data_in\\`'s value doesn't matter), and the remaining where \\`reset\\` is low and \\`data_in\\` is low.\n\nThis input of \"R0000\" would correspond to feeding in just the single decimal digit 0 to our circuit. \\\nAfter receiving this input the output \\`div7\\` must be high. \\\nLikewise, the input of \"R00010111\" would correspond to feeding in the decimal digits 1, then 7, representing the number 17. \\\nThis is not a multiple of seven, so \\`div7\\` would be required to be low after this input.\n\nAs another example, if fed \"R0001R0111\" your circuit must set \\`div7\\` low after the first digit is ingested, but then must set \\`div7\\` high at the very end, because the second reset throws away the first 1 digit. \\\nTherefore, the number being processed at the very end is just 7, not 17.\n\nYour circuit must work for arbitrarily large numbers. \\\nYou will only be graded on your output after each complete digit is fed in, and you won't be graded on your output before any digits are fed in or before the first reset. \\\nNor will you be graded on inputs like \"R1010\" that use invalid digits.\n\nThe test cases being fed in are:\n0 (yes)\n1 (no)\n7 (yes)\n14 (no (after just the first digit has been fed in), then yes)\n17 (no, then no)\n791 (yes, then no, then yes)\n`,\n    startingCode: `\nclk, reset, data_in = get_level_inputs()\ndiv7, = get_level_outputs()\n\nprobe(\"Clock\", clk)\nprobe(\"Reset\", reset)\nprobe(\"Data in\", data_in)\nprobe(\"Divisible by 7?\", div7)\n`,\n    makeInputNets: (components: EComponent[]) => {\n      components.push(\n        { kind: 'signal', net: '_net_clk',     pattern: [...'01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101z'] as any, repeat: false },\n        { kind: 'signal', net: '_net_reset',   pattern: [...'11000000001100000000110000000011000000000000000011000000000000000011000000000000000000000000z'] as any, repeat: false },\n        { kind: 'signal', net: '_net_data_in', pattern: [...'zz00000000zz00000011zz00111111zz0000001100110000zz0000001100111111zz001111111100001100000011z'] as any, repeat: false },\n        //                                                   xxxxxxxxxx1xxxxxxxxx0xxxxxxxxx1xxxxxxxxx0xxxxxxx1xxxxxxxxx0xxxxxxx0xxxxxxxxx1xxxxxxx0xxxxxxx1\n      );\n      return ['_net_clk', '_net_reset', '_net_data_in'];\n    },\n    makeOutputNets: () => ['_net_div7'],\n    gradeResults: (self: ILevel, simResults: ISimResults) => doGrading(simResults, [\n      { net: '_net_div7', netName: \"Divisible by 7?\", reqs: reqSeq(self.clockDivider, 'xxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'), failureMessages: ['The input being tested at this point is 0, which is divisible by seven',                                         '0 is divisible'] },\n      { net: '_net_div7', netName: \"Divisible by 7?\", reqs: reqSeq(self.clockDivider, 'xxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'), failureMessages: ['The input being tested at this point is 1, which is not divisible by seven',                                     '1 is not divisible'] },\n      { net: '_net_div7', netName: \"Divisible by 7?\", reqs: reqSeq(self.clockDivider, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'), failureMessages: ['The input being tested at this point is 7, which is divisible by seven',                                         '7 is divisible'] },\n      { net: '_net_div7', netName: \"Divisible by 7?\", reqs: reqSeq(self.clockDivider, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'), failureMessages: ['The input being tested at this point is 1 (just the first digit of 14), which is not divisible by seven',        '1 is not divisible'] },\n      { net: '_net_div7', netName: \"Divisible by 7?\", reqs: reqSeq(self.clockDivider, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'), failureMessages: ['The input being tested at this point is 14, which is divisible by seven',                                        '14 is divisible'] },\n      { net: '_net_div7', netName: \"Divisible by 7?\", reqs: reqSeq(self.clockDivider, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'), failureMessages: ['The input being tested at this point is 1 (just the first digit of 17), which is not divisible by seven',        '1 is not divisible'] },\n      { net: '_net_div7', netName: \"Divisible by 7?\", reqs: reqSeq(self.clockDivider, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxxxxxxxx'), failureMessages: ['The input being tested at this point is 17, which is not divisible by seven',                                    '17 is not divisible'] },\n      { net: '_net_div7', netName: \"Divisible by 7?\", reqs: reqSeq(self.clockDivider, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1xxxxxxxxxxxxxxxx'), failureMessages: ['The input being tested at this point is 7 (just the first digit of 791), which is divisible by seven',           '7 is divisible'] },\n      { net: '_net_div7', netName: \"Divisible by 7?\", reqs: reqSeq(self.clockDivider, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxx'), failureMessages: ['The input being tested at this point is 79 (just the first two digits of 791), which is not divisible by seven', '79 is not divisible'] },\n      { net: '_net_div7', netName: \"Divisible by 7?\", reqs: reqSeq(self.clockDivider, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1'), failureMessages: ['The input being tested at this point is 791, which is divisible by seven',                                       '791 is divisible'] },\n    ]),\n    xStep: 0.3 / 5,\n    simSteps: 3000 * 5,\n    clockDivider: 30 * 5,\n    tickSpacing: 2,\n  },\n\n  // ============================== SRAM ==============================\n  {\n    internalName: 'sram',\n    name: 'SRAM',\n    levelDesc: `This level isn't complete yet. Come back later.`,\n    startingCode: '# Your code here.\\n',\n    makeInputNets: () => ['_net_A', '_net_output_enable'],\n    makeOutputNets: () => ['_net_notA'],\n    gradeResults: (x: any) => ({ success: false, failureTime: 3, message: 'bad', miniMessage: '?' }),\n    xStep: 0.3 / 5,\n    simSteps: 3000 * 5,\n    clockDivider: 30 * 5,\n    tickSpacing: 2,\n  },\n\n  // ============================== Microprocessor ==============================\n  {\n    internalName: 'microprocessor',\n    name: 'Microprocessor',\n    levelDesc: `This is the first level.\nTo open up the documentation press `,\n    startingCode: '# Your code here.\\n',\n    makeInputNets: () => ['_net_A', '_net_output_enable'],\n    makeOutputNets: () => ['_net_notA'],\n    gradeResults: (x: any) => ({ success: false, failureTime: 3, message: 'bad', miniMessage: '?' }),\n    xStep: 1,\n    simSteps: 400,\n    clockDivider: 10,\n    tickSpacing: 1,\n  },\n];\n\ninterface ISimResults {\n  components: number;\n  nets: string[];\n  netTraces: Map<string, Uint8Array>;\n  probes: EProbe[];\n  shootThroughOccurred: boolean;\n  earliestShootThrough: number;\n}\n\ninterface ILevelState {\n  metadata: {\n    savedVersion: number;\n    everOpened: boolean;\n    everBeaten: boolean;\n  };\n  code: string;\n}\n\ninterface IGrading {\n  success: boolean;\n  failureTime: number;\n  message: string;\n  miniMessage: string;\n}\n\ninterface ITextEditorProps {\n  startingCode: string;\n  extraKeysMaker: (textEditorComponent: TextEditor) => any;\n  getSavedCode: () => string;\n}\n\ninterface ITextEditorState {\n  code: string;\n}\n\nclass TextEditor extends React.PureComponent<ITextEditorProps, ITextEditorState> {\n  constructor(props: ITextEditorProps) {\n    super(props);\n    this.state = { code: props.startingCode };\n  }\n\n  render() {\n    return <div>\n      <ControlledCodeMirror\n        value={this.state.code}\n        options={{\n          mode: 'python',\n          theme: 'material',\n          lineNumbers: true,\n          indentUnit: 4,\n          lineWrapping: true,\n          extraKeys: this.props.extraKeysMaker(this),\n        }}\n        onBeforeChange={(editor, data, code) => {\n          this.setState({ code });\n        }}\n      />\n      {this.props.getSavedCode() !== this.state.code &&\n        <div style={{\n          position: 'absolute',\n          right: 20,\n          bottom: 20,\n          userSelect: 'none',\n          pointerEvents: 'none',\n          zIndex: 5,\n          color: 'red',\n          opacity: 0.5,\n        }}>\n          ⬤ Unsaved (ctrl + s to save)\n        </div>\n      }\n    </div>;\n  }\n}\n\ninterface IAppState {\n  page: 'level-select' | 'level';\n  currentLevel: ILevel;\n  terminalOutput: string;\n  simOutput: string;\n  simResults: null | ISimResults;\n  grading: null | IGrading;\n  paneColor: string;\n  docsOpen: boolean;\n  cheatMode: boolean;\n}\n\nclass App extends React.PureComponent<{}, IAppState> {\n  levelStates: Map<string, ILevelState>;\n  textEditorRef = React.createRef<TextEditor>();\n\n  constructor(props: {}) {\n    super(props);\n\n    // Load level states from localStorage.\n    this.levelStates = new Map<string, ILevelState>(); // Silence the error.\n    this.loadLevelStatesFromLocalStorage();\n\n    this.state = {\n      page: 'level-select',\n      currentLevel: null as unknown as ILevel,\n      //code: '',\n      terminalOutput: '',\n      simOutput: '',\n      simResults: null,\n      grading: null,\n      paneColor: '#222',\n      docsOpen: false,\n      cheatMode: false,\n    };\n\n    window.onpopstate = (event) => {\n      this.navigateBack();\n    };\n\n    var cheatIndex = 0;\n    const cheatSequence = 'unlock';\n    document.addEventListener('keydown', (evt) => {\n      if (evt.key === cheatSequence[cheatIndex]) {\n        cheatIndex++;\n        if (cheatIndex >= cheatSequence.length)\n          this.setState({ cheatMode: true });\n      } else {\n        cheatIndex = 0;\n      }\n    });\n  }\n\n  loadLevelStatesFromLocalStorage() {\n    this.levelStates = new Map<string, ILevelState>();\n    for (const level of globalLevelsList) {\n      const metadata = JSON.parse(\n        localStorage.getItem('level-' + level.internalName + '-meta')\n        || '{\"savedVersion\": 1, \"everBeaten\": false, \"everOpened\": false}'\n      );\n      const code = localStorage.getItem('level-' + level.internalName + '-saved-code') || level.startingCode;\n      this.levelStates.set(level.internalName, { metadata, code });\n    }\n  }\n\n  reportError(lineNum: number, message: string) {\n    const lineOfCode = this.getCode().split('\\n')[lineNum - 1];\n    this.setState({\n      terminalOutput: `  ${lineOfCode}\\n\\nError on line ${lineNum}: ${message}`,\n    });\n  }\n\n  simulate(components: EComponent[]) {\n    const startTime = performance.now();\n    // Insert components for power and ground.\n    components = [\n      ...components,\n      {kind: 'signal', net: 'vdd', pattern: ['1'], repeat: false},\n      {kind: 'signal', net: 'gnd', pattern: ['0'], repeat: false},\n    ];\n    // Find all nets.\n    const nets = new Set<string>(['vdd', 'gnd']);\n    const tracedNets = new Set<string>();\n    const probes: EProbe[] = [];\n    const netCanonicalizer = new UnionFind<string>();\n    for (const component of components) {\n      switch (component.kind) {\n        case 'fet':\n          for (const net of [component.gate, component.drain, component.source])\n            nets.add(net);\n          break;\n        case 'wire':\n          for (const net of component.nets)\n            nets.add(net);\n          netCanonicalizer.union(...component.nets);\n          break;\n        case 'probe':\n          probes.push(component);\n          nets.add(component.net);\n          tracedNets.add(component.net);\n          break;\n        case 'trace':\n          for (const net of component.nets)\n            tracedNets.add(net);\n          break;\n        case 'pull_resistor':\n        case 'button':\n        case 'signal':\n          nets.add(component.net);\n          break;\n      }\n    }\n\n    // TODO: Possibly run DRCs here, like checking that it's valid CMOS.\n\n    if (!wasmInitialized) {\n      this.setState({ simOutput: 'Wasm component not initialized.' });\n      return;\n    }\n\n    // Serialize the results.\n    const descArray: number[] = [];\n    const netIndices = new Map<string, number>();\n    for (const net of nets) {\n      const canonicalizedNet = netCanonicalizer.canonicalize(net);\n      if (!netIndices.has(canonicalizedNet)) {\n        netIndices.set(canonicalizedNet, netIndices.size);\n      }\n      netIndices.set(net, netIndices.get(canonicalizedNet)!);\n    }\n    for (const component of components) {\n      switch (component.kind) {\n        case 'fet':\n          descArray.push(\n            1,\n            +component.isPfet,\n            netIndices.get(component.gate)!,\n            netIndices.get(component.drain)!,\n            netIndices.get(component.source)!,\n          );\n          break;\n        case 'signal':\n          descArray.push(\n            2,\n            netIndices.get(component.net)!,\n            +component.repeat,\n            component.pattern.length,\n            ...[...component.pattern].map((c) => ({'0': 0, '1': 1, 'z': 2}[c])),\n          );\n          break;\n        case 'pull_resistor':\n          descArray.push(\n            3,\n            {'up': 0, 'down': 1}[component.direction],\n            netIndices.get(component.net)!,\n          );\n          break;\n        case 'sram':\n          descArray.push(\n            4,\n            component.address_nets.length, // address bit count\n            component.bus_in_nets.length,  // word size\n            netIndices.get(component.write_enable_net)!,\n            component.contents.length,\n            ...component.contents,\n            ...component.address_nets.map((net) => netIndices.get(net)!),\n            ...component.bus_in_nets.map((net) => netIndices.get(net)!),\n            ...component.bus_out_nets.map((net) => netIndices.get(net)!),\n          );\n          break;\n        default:\n          continue;\n      }\n      descArray.push(123456789);\n    }\n    const desc = new Uint32Array(descArray);\n    const netsToTraceNativeArray = new Uint32Array(Array.from(tracedNets).map((net) => netIndices.get(net)!));\n    //console.log('[SNP] netsToTraceNativeArray:', netsToTraceNativeArray);\n    const traceValues = perform_simulation(\n      desc,\n      netsToTraceNativeArray,\n      netIndices.size,\n      this.state.currentLevel.simSteps,\n      this.state.currentLevel.clockDivider,\n    );\n    const traceIndices = get_indices();\n    //console.log('[SNP] Trace indices:', traceIndices);\n    const traces: Uint8Array[] = [];\n    //let shootThroughOccurred = false;\n    //let earliestShootThrough = Infinity;\n    for (let i = 0; i < traceIndices.length; i += 2) {\n      const start = traceIndices[i];\n      const len = traceIndices[i + 1];\n      const trace = traceValues.slice(start, start + len);\n      traces.push(trace);\n    }\n    const earliestShootThrough = get_first_shoot_through();\n    const shootThroughOccurred = earliestShootThrough !== -1;\n\n    //console.log('[SNP] Raw trace data:', traces);\n\n    const netTraces = new Map<string, Uint8Array>();\n    let i = 0;\n    for (const net of tracedNets)\n      netTraces.set(net, traces[i++]);\n\n    //console.log('[SNP] Floop:', tracedNets);\n    //console.log('[SNP] Traces:', netTraces);\n\n    const elapsed = performance.now() - startTime;\n    let simOutput = `------- Simulation completed in: ${Math.round(elapsed)}ms (Components: ${components.length - 2} Nets: ${nets.size})`;\n    const simResults: ISimResults = {\n      components: components.length,\n      nets: [...nets],\n      netTraces,\n      probes,\n      shootThroughOccurred,\n      earliestShootThrough,\n    };\n\n    const grading: IGrading = shootThroughOccurred ?\n      {\n        success: false,\n        failureTime: earliestShootThrough,\n        message: 'Shoot through (shorting vdd to gnd) is never allowed.',\n        miniMessage: 'Shoot through occurs here',\n      }\n      : this.state.currentLevel.gradeResults(this.state.currentLevel, simResults);\n\n    if (grading.success) {\n      const levelState = this.levelStates.get(this.state.currentLevel.internalName)!;\n      levelState.metadata.everBeaten = true;\n      persistLevelState(this.state.currentLevel.internalName, levelState);\n      this.setState({ paneColor: '#343' });\n    } else {\n      simOutput += '\\n\\nLEVEL FAILED: ' + grading.message;\n    }\n\n    this.setState({ simOutput, simResults, grading });\n  }\n\n  onCompile = (code: string) => {\n    const Sk = (window as any).Sk;\n    Sk.pre = \"output\";\n    var results: string[] = [];\n\n    const components: EComponent[] = [];\n\n    var nextId = 0;\n    function getId(): string {\n      nextId++;\n      return nextId.toString();\n    }\n\n    Sk.builtins.vdd = Sk.ffi.remapToPy('vdd');\n    Sk.builtins.gnd = Sk.ffi.remapToPy('gnd');\n\n    Sk.builtins.new_net = (name: any) => {\n      return Sk.ffi.remapToJs(name) + getId();\n    };\n    Sk.builtins.new_net.co_varnames = ['name'];\n    Sk.builtins.new_net.$defaults = ['net'];\n    Sk.builtins.new_net.co_numargs = 1;\n\n    Sk.builtins.nfet = (gate: any, drain: any, source: any) => {\n      if (gate === undefined || drain === undefined)\n        throw 'nfet must be called like nfet(gate, drain, source) or like nfet(gate, drain) with source implicitly being gnd';\n      gate = Sk.ffi.remapToJs(gate);\n      drain = Sk.ffi.remapToJs(drain);\n      source = Sk.ffi.remapToJs(source);\n      if (source === undefined)\n        source = 'gnd';\n      if (typeof gate !== 'string') throw 'nfet(gate, drain, source) gate argument must be net';\n      if (typeof drain !== 'string') throw 'nfet(gate, drain, source) drain argument must be net';\n      if (typeof source !== 'string') throw 'nfet(gate, drain, source) source argument must be net';\n      components.push({ kind: 'fet', isPfet: false, gate, drain, source });\n    };\n    Sk.builtins.nfet.co_varnames = ['gate', 'drain', 'source'];\n    Sk.builtins.nfet.$defaults = [undefined, undefined, undefined];\n    Sk.builtins.nfet.co_numargs = 3;\n\n    Sk.builtins.pfet = (gate: any, drain: any, source: any) => {\n      if (gate === undefined || drain === undefined)\n        throw 'pfet must be called like pfet(gate, drain, source) or like pfet(gate, drain) with source implicitly being vdd';\n      gate = Sk.ffi.remapToJs(gate);\n      drain = Sk.ffi.remapToJs(drain);\n      source = Sk.ffi.remapToJs(source);\n      if (source === undefined)\n        source = 'vdd';\n      if (typeof gate !== 'string') throw 'pfet(gate, drain, source) gate argument must be net';\n      if (typeof drain !== 'string') throw 'pfet(gate, drain, source) drain argument must be net';\n      if (typeof source !== 'string') throw 'pfet(gate, drain, source) source argument must be net';\n      components.push({ kind: 'fet', isPfet: true, gate, drain, source });\n    };\n    Sk.builtins.pfet.co_varnames = ['gate', 'drain', 'source'];\n    Sk.builtins.pfet.$defaults = [undefined, undefined, undefined];\n    Sk.builtins.pfet.co_numargs = 3;\n\n    Sk.builtins.probe = (label: string, net: any) => {\n      label = Sk.ffi.remapToJs(label);\n      net = Sk.ffi.remapToJs(net);\n      if (typeof label !== 'string') throw 'probe(label, net) label argument must be string';\n      if (typeof net !== 'string') throw 'probe(label, net) net argument must be string';\n      components.push({ kind: 'probe', label, net });\n    };\n    Sk.builtins.probe.co_varnames = ['label', 'net'];\n    Sk.builtins.probe.co_numargs = 2;\n\n    Sk.builtins.pull_down_resistor = (net: any) => {\n      net = Sk.ffi.remapToJs(net);\n      if (typeof net !== 'string') throw 'pull_down_resistor(net) net argument must be string';\n      components.push({ kind: 'pull_resistor', direction: 'down', net });\n    };\n    Sk.builtins.pull_down_resistor.co_varnames = ['net'];\n    Sk.builtins.pull_down_resistor.co_numargs = 1;\n\n    Sk.builtins.pull_up_resistor = (net: any) => {\n      net = Sk.ffi.remapToJs(net);\n      if (typeof net !== 'string') throw 'pull_up_resistor(net) net argument must be string';\n      components.push({ kind: 'pull_resistor', direction: 'up', net });\n    };\n    Sk.builtins.pull_up_resistor.co_varnames = ['net'];\n    Sk.builtins.pull_up_resistor.co_numargs = 1;\n\n    Sk.builtins.wire_together = (net1: any, net2: any) => {\n      net1 = Sk.ffi.remapToJs(net1);\n      net2 = Sk.ffi.remapToJs(net2);\n      if (typeof net1 !== 'string') throw 'wire_together(net1, net2) net1 argument must be string';\n      if (typeof net2 !== 'string') throw 'wire_together(net1, net2) net2 argument must be string';\n      components.push({ kind: 'wire', nets: [net1, net2] });\n    };\n    Sk.builtins.wire_together.co_varnames = ['net1', 'net2'];\n    Sk.builtins.wire_together.co_numargs = 2;\n\n    /*\n    Sk.builtins.button = () => {\n      const net = 'button' + getId();\n      components.push({ kind: 'button', net });\n      return Sk.ffi.remapToPy(net);\n    };\n    Sk.builtins.button.co_varnames = [];\n    Sk.builtins.button.co_numargs = 0;\n    */\n\n    Sk.builtins.signal = (pattern: any, name: any) => {\n      const net = Sk.ffi.remapToJs(name) + getId();\n      if (pattern === undefined)\n        throw 'signal must take pattern, like: signal(\"01...\")';\n      pattern = Sk.ffi.remapToJs(pattern).toLowerCase();\n      const repeat = pattern.endsWith('...');\n      if (repeat)\n        pattern = pattern.slice(0, -3);\n      for (const c of pattern)\n        if (c !== '0' && c !== '1' && c !== 'z')\n          throw 'The pattern must be made of 0s, 1s and zs, and may optionally end with ... to indicate that the pattern should repeat.';\n      components.push({ kind: 'signal', net, pattern, repeat });\n      return Sk.ffi.remapToPy(net);\n    };\n    Sk.builtins.signal.co_varnames = ['desc', 'name'];\n    Sk.builtins.signal.$defaults = [undefined, 'signal'];\n    Sk.builtins.signal.co_numargs = 2;\n\n    Sk.builtins.make_sram = (address_nets: any, bus_in_nets: any, bus_out_nets: any, write_enable_net: any, contents: any) => {\n      address_nets = Sk.ffi.remapToJs(address_nets);\n      bus_in_nets = Sk.ffi.remapToJs(bus_in_nets);\n      bus_out_nets = Sk.ffi.remapToJs(bus_out_nets);\n      write_enable_net = Sk.ffi.remapToJs(write_enable_net);\n      contents = Sk.ffi.remapToJs(contents);\n      if ([address_nets, bus_in_nets, bus_out_nets, write_enable_net].includes(undefined))\n        throw 'too few arguments to: make_sram(address_nets: List[Net], bus_in_nets: List[Net], bus_out_nets: List[Net], write_enable_net: Net, contents: List[int] = [])';\n      if (bus_in_nets.length !== bus_out_nets.length)\n        throw 'make_sram must take the same number of bus_in_nets and bus_out_nets — both are the word size of the memory';\n      components.push({\n        kind: 'sram',\n        contents: new Uint32Array(contents),\n        address_nets,\n        bus_in_nets,\n        bus_out_nets,\n        write_enable_net,\n      });\n    };\n    Sk.builtins.make_sram.co_varnames = ['address_nets', 'bus_in_nets', 'bus_out_nets', 'write_enable_net', 'contents'];\n    Sk.builtins.make_sram.$defaults = [undefined, undefined, undefined, undefined, []];\n    Sk.builtins.make_sram.co_numargs = 5;\n\n    Sk.builtins.get_level_inputs = () => {\n      const nets = this.state.currentLevel.makeInputNets(components);\n      return Sk.ffi.remapToPy(nets);\n    };\n    Sk.builtins.get_level_inputs.co_varnames = [];\n    Sk.builtins.get_level_inputs.co_numargs = 0;\n\n    Sk.builtins.get_level_outputs = () => {\n      const nets = this.state.currentLevel.makeOutputNets(components);\n      // Ensure that the output nets are actually traced by the simulator, so we may actually read their values.\n      components.push({ kind: 'trace', nets });\n      return Sk.ffi.remapToPy(nets);\n    };\n    Sk.builtins.get_level_outputs.co_varnames = [];\n    Sk.builtins.get_level_outputs.co_numargs = 0;\n\n    Sk.configure({\n      output: (obj: any) => {\n        results.push(obj.toString());\n        //console.log('Printing:', obj.toString());\n      },\n      read: builtinRead,\n    });\n    //(Sk.TurtleGraphics || (Sk.TurtleGraphics = {})).target = 'mycanvas';\n    var myPromise = Sk.misceval.asyncToPromise(function () {\n      return Sk.importMainWithBody(\"<stdin>\", false, code, true);\n    });\n    myPromise.then(\n      (mod: any) => {\n        //console.log('success');\n        let terminalOutput = results.join('');\n        if (terminalOutput && !terminalOutput.endsWith('\\n'))\n          terminalOutput += '\\n';\n        this.setState({ terminalOutput, paneColor: '#222' });\n        this.simulate(components);\n      },\n      (err: any) => {\n        this.setState({ terminalOutput: results.join('') + '\\n' + err.toString(), simOutput: '', paneColor: '#433' });\n      },\n    );\n  }\n\n  switchToLevel(level: ILevel) {\n    this.setState({\n      page: 'level',\n      currentLevel: level,\n      //code: this.levelStates.get(level.internalName)!.code,\n      terminalOutput: '',\n      simOutput: '(Hit ctrl + enter in the code window to rerun.)',\n      simResults: null,\n      grading: null,\n      paneColor: '#222',\n    });\n    //this.setCode(this.levelStates.get(level.internalName)!.code);\n    /*\n    if (this.codeMirrorRef.current !== null)\n      (this.codeMirrorRef.current as any).value = this.state.currentLevel.startingCode;\n    */\n\n    const levelState = this.levelStates.get(level.internalName)!;\n    levelState.metadata.everOpened = true;\n    persistLevelState(level.internalName, levelState);\n\n    window.history.pushState({page: 'level', currentLevel: level.internalName}, 'Make a Microprocessor');\n  }\n\n  getIsUnsaved = (): boolean => this.getCode() !== this.getSavedCode();\n\n  getSavedCode = (): string => this.levelStates.get(this.state.currentLevel.internalName)!.code;\n\n  navigateBack() {\n    if (!this.getIsUnsaved() || window.confirm('Exit level without saving work? (Just hit ctrl+s in the code editor.)'))\n      this.setState({ page: 'level-select' });\n  }\n\n  setCode(code: string) {\n    if (this.textEditorRef.current !== null)\n      this.textEditorRef.current.setState({ code });\n  }\n\n  getCode(): string {\n    if (this.textEditorRef.current !== null)\n      return this.textEditorRef.current.state.code;\n    return 'raise Exception(\"Internal bug: textEditorRef is null\")';\n  }\n\n  render() {\n    if (this.state.page === 'level-select') {\n      var locked = false;\n\n      return <div style={{\n        width: '100%',\n        height: '100vh',\n        color: 'white',\n        fontFamily: 'monospace',\n        display: 'flex',\n        justifyContent: 'center',\n        textAlign: 'center',\n        fontSize: '150%',\n      }}>\n        <div style={{\n          marginTop: 30,\n        }}>\n          <span style={{fontSize: '200%'}}>Make a Microprocessor</span><br/>\n          <br/>\n          Select a level:<br/>\n          <div style={{ display: 'inline-block' }}>\n            <div style={{ display: 'flex', flexDirection: 'column', marginTop: 20 }}>\n              {globalLevelsList.map((level, i) => {\n                const levelState = this.levelStates.get(level.internalName)!;\n\n                const result = <div\n                  key={i}\n                  style={{\n                    fontSize: '120%',\n                    margin: 5,\n                    padding: 10,\n                    width: 300,\n                    position: 'relative',\n                  }}\n                  className={locked ? 'lockedButton' : 'hoverButton'}\n                  onClick={locked ? () => null : () => this.switchToLevel(level)}\n                >\n                  {locked ? '???' : level.name}\n                  {!locked && !levelState.metadata.everOpened && <div style={{\n                    position: 'absolute',\n                    fontSize: '80%',\n                    color: 'red',\n                    left: '92%',\n                    top: '0%',\n                    transform: 'rotate(30deg)',\n                  }}>\n                    New!\n                  </div>}\n                  {levelState.metadata.everBeaten && <div style={{\n                    position: 'absolute',\n                    fontSize: '300%',\n                    color: 'green',\n                    left: '100%',\n                    top: '50%',\n                    transform: 'translate(-50%, -50%)',\n                  }}>\n                    ✓\n                  </div>}\n                </div>;\n\n                if (!levelState.metadata.everBeaten && !this.state.cheatMode)\n                  locked = true;\n\n                return result;\n              })}\n            </div>\n          </div>\n        </div>\n\n        <div style={{ position: 'absolute', left: 10, bottom: 10 }}>\n          By Peter Schmidt-Nielsen (v0.3c)\n        </div>\n        <div\n          style={{ position: 'absolute', right: 10, bottom: 10, padding: 10 }}\n          className='hoverButton'\n          onClick={() => {\n            if (window.confirm('Are you sure you want to completely reset the game state, including throwing away all of your code?')) {\n              resetGameState();\n              this.loadLevelStatesFromLocalStorage();\n              this.forceUpdate();\n            }\n          }}\n        >\n          Reset Entire Game State\n        </div>\n      </div>;\n    }\n\n    const vertResizeStyle = {\n      background: 'black',\n      width: '3px',\n      minWidth: '3px',\n      cursor: 'col-resize',\n      height: '100%',\n      zIndex: 20,\n    };\n    const horizResizeStyle = {\n      background: 'black',\n      height: '3px',\n      minHeight: '3px',\n      cursor: 'row-resize',\n      width: '100%',\n      zIndex: 20,\n    };\n    let vertSplitDefault = parseInt(localStorage.getItem('split1') || '500');\n    let horizSplitDefault = parseInt(localStorage.getItem('split2') || '400');\n    return <div style={{\n      display: 'flex',\n    }}>\n      {/* Code editor */}\n      <SplitPane\n        split=\"vertical\"\n        minSize={300}\n        defaultSize={vertSplitDefault}\n        onChange={(size) => localStorage.setItem('split1', size.toString())}\n        resizerStyle={vertResizeStyle}\n      >\n        <div style={{ position: 'relative' }}>\n          {/* Top left menu bar */}\n          <div style={{ display: 'flex', alignItems: 'center', background: '#444', borderBottom: '2px solid #222', height: 60 }}>\n            <div\n              style={{\n                bottom: 10,\n                right: 70,\n              }}\n              className='mainButton'\n              onClick={() => this.navigateBack()}\n            >\n              ❮\n            </div>\n            <div\n              style={{\n                bottom: 10,\n                right: 10,\n              }}\n              className='mainButton'\n              onClick={() => this.setState({ docsOpen: !this.state.docsOpen })}\n            >\n              Parts List\n            </div>\n            <div\n              style={{\n                bottom: 10,\n                right: 10,\n              }}\n              className='mainButton'\n              onClick={() => {\n                if (window.confirm(\"Throw away your code and reset to the level's starting code?\"))\n                  this.setCode(this.state.currentLevel.startingCode);\n                  //this.setState({ code: this.state.currentLevel.startingCode });\n              }}\n            >\n              Reset code\n            </div>\n            {/*\n            <div style={{ color: 'white', marginLeft: 10, fontSize: '150%' }}>\n              Level: {this.state.currentLevel.name}\n            </div>\n            */}\n          </div>\n\n          <TextEditor\n            ref={this.textEditorRef}\n            startingCode={this.levelStates.get(this.state.currentLevel.internalName)!.code}\n            getSavedCode={this.getSavedCode}\n            extraKeysMaker={(textEditorComponent: TextEditor) => ({\n              'Ctrl-Enter': (cm: any) => {\n                this.onCompile(textEditorComponent.state.code);\n                //this.props.onCompile(this.getCode());\n              },\n              'Ctrl-S': (cm: any) => {\n                const levelState = this.levelStates.get(this.state.currentLevel.internalName)!;\n                levelState.code = textEditorComponent.state.code;\n                persistLevelState(this.state.currentLevel.internalName, levelState);\n                this.forceUpdate();\n              },\n              /*'Tab': (cm: any) => {\n                cm.replaceSelection('  ', 'end');\n              },*/\n            })}\n          />\n          {\n          // <UnControlledCodeMirror\n          //   ref={this.codeMirrorRef}\n          //   value={this.getCode()}\n          //   options={codeMirrorOptions(this.onCompile)}\n          //   /*\n          //   onBeforeChange={(editor, data, code) => {\n          //     this.setState({ code });\n          //   }}\n          //   */\n          // />\n          }\n        </div>\n\n        <div>\n          {/*\n          <SplitPane\n            split=\"horizontal\"\n            minSize={30}\n            defaultSize={horizSplitDefault}\n            onChange={(size) => localStorage.setItem('split2', size.toString())}\n            resizerStyle={horizResizeStyle}\n          >\n          */}\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n            }}\n          >\n            <div style={{\n              width: '100%',\n              height: '60vh',\n              backgroundColor: '#333',\n              color: 'white',\n              fontFamily: 'monospace',\n              overflow: 'scroll',\n            }}>\n              <div style={{ margin: 10 }}>\n                {/*\n                {this.state.simResults !== null && <>\n                  <Collapsible trigger='Nets' transitionTime={100}>\n                    {[...this.state.simResults.nets].map((net: any) =>\n                      <div key={net}>\n                        {net}: 1234\n                      </div>\n                    )}\n                  </Collapsible>\n                </>}\n                */}\n\n                {this.state.simResults !== null &&\n                  /*\n                  this.state.simResults.probes.map((probeName) =>\n                    <div key={probeName} style={{display: 'flex', justifyContent: 'center', alignContent: 'center', alignItems: 'center'}}>\n                      <div>{probeName}:</div>\n                      {renderTrace(this.state.simResults!.netTraces.get(probeName)!)}\n                    </div>\n                  )*/\n                  renderTraces(this.state.currentLevel, this.state.simResults, this.state.grading!)\n                }\n              </div>\n            </div>\n\n            <div style={{\n              backgroundColor: this.state.paneColor,\n              color: 'white',\n              fontFamily: 'monospace',\n              width: '100%',\n              height: '40vh',\n              display: 'flex',\n              //overflowY: 'scroll',\n            }}>\n              <div style={{ padding: 10, width: 500, backgroundColor: '#222', overflowY: 'scroll' }}>\n                <b>{this.state.currentLevel.name}</b>\n                <p style={{whiteSpace: 'pre-wrap'}}>\n                  {this.state.currentLevel.levelDesc}\n                </p>\n              </div>\n\n              <div\n                style={{ width: 2, backgroundColor: '#555' }}\n              />\n\n              <div style={{\n                margin: 10,\n                whiteSpace: 'pre-wrap',\n                color: 'white',\n                overflow: 'scroll',\n                width: '100%',\n              }}>\n                {this.state.terminalOutput && <>\n                  Python output:<br/>\n                  <span style={{color: 'lightblue'}}>{this.state.terminalOutput}</span><br/>\n                  <br/>\n                </>}\n                {this.state.simOutput}\n              </div>\n            </div>\n          </div>\n          {/* </SplitPane> */}\n        </div>\n      </SplitPane>\n\n      {this.state.paneColor === '#343' && <div style={{\n        position: 'absolute',\n        right: 30,\n        bottom: 30,\n        padding: 20,\n        fontSize: '400%',\n        boxShadow: '0px 0px 50px green',\n      }} className='hoverButton' onClick={() => {\n        this.navigateBack();\n      }}>\n        You win!\n      </div>}\n\n      <div style={{\n        position: 'absolute',\n        width: 800,\n        height: '100%',\n        boxSizing: 'border-box',\n        boxShadow: '0px 0px 10px black',\n        right: this.state.docsOpen ? 810 : 0,\n        zIndex: 100,\n        backgroundColor: '#aaa',\n        transition: '0.2s right',\n        padding: 10,\n        transform: 'translate(810px, 0px)',\n        overflowY: 'scroll',\n      }}>\n        <div style={{ position: 'sticky', top: 0 }}>\n          <div\n            style={{ position: 'absolute', top: 5, right: 5, fontSize: '120%', padding: 4 }}\n            className='hoverButton'\n            onClick={() => this.setState({ docsOpen: false })}\n          >\n            ✕\n          </div>\n        </div>\n\n        <span style={{ fontSize: '150%', fontWeight: 'bold' }}>Parts list</span>\n        <div style={{ marginTop: 10 }}>\n          The code area is \"Python\". Hit ctrl + enter in the code area to rerun it, and hit ctrl + s to save your code.\n          I provide functions that construct circuit components as a side effect.\n          The four functions you need to use to assemble your circuit are:\n\n          <div style={{ marginLeft: 20, marginBottom: 20 }}>\n            <pre style={{ fontWeight: 'bold', fontSize: '120%' }}>nfet(gate: Net, drain: Net, source: Optional[Net])</pre>\n            <div style={{ marginLeft: 20 }}>\n              Constructs an n-channel FET in the circuit. The behavior is:\n              <pre style={{ marginLeft: 20 }}>{\n`if gate is high and source is low:\n    drive drain low`\n              }</pre>\n              If the source argument is omitted it defaults to <code>gnd</code> (always low).\n              Examples:\n              <pre style={{ marginLeft: 20 }}>{\n`# Pulls \\`output\\` down whenever \\`gate\\` is high.\nnfet(gate, output, gnd)\n\n# This is equivalent to the above, as gnd is implicit.\nnfet(gate, output)\n\n# Here two nfets are wired in series. Thus, \\`output\\` is\n# pulled down when both \\`gate1\\` and \\`gate2\\` are high.\nintermediate = new_net()\nnfet(gate1, intermediate)\nnfet(gate2, output, intermediate)`\n              }</pre>\n\n              There is no modeled body diode, so the FET simply does nothing (doesn't conduct) if source is high and drain is low (pass transistor logic is not allowed).\n              Additionally, no gate capacitance is modeled — all nets that aren't driven return to a floating state which doesn't switch FETs on.\n            </div>\n\n            <pre style={{ fontWeight: 'bold', fontSize: '120%' }}>pfet(gate: Net, drain: Net, source: Optional[Net])</pre>\n            <div style={{ marginLeft: 20 }}>\n              Constructs a p-channel FET in the circuit. The behavior is:\n              <pre style={{ marginLeft: 20 }}>{\n`if gate is low and source is high:\n    drive drain high`\n              }</pre>\n              If the source argument is omitted it defaults to <code>vdd</code> (always high).\n              Again, there is no modeled body diode or gate capacitance.\n            </div>\n\n            <pre style={{ fontWeight: 'bold', fontSize: '120%' }}>new_net() -&gt; Net</pre>\n            <div style={{ marginLeft: 20 }}>\n              Creates a new unique net (electrical node in your circuit), and returns it.\n            </div>\n\n            <pre style={{ fontWeight: 'bold', fontSize: '120%' }}>wire_together(net1: Net, net2: Net)</pre>\n            <div style={{ marginLeft: 20 }}>\n              Connect two nets together so that they are electrically equivalent.\n            </div>\n          </div>\n\n          I provide two additional functions for debugging and testing purposes:\n\n          <div style={{ marginLeft: 20, marginBottom: 20 }}>\n            <pre style={{ fontWeight: 'bold', fontSize: '120%' }}>probe(label: str, net: Net)</pre>\n            <div style={{ marginLeft: 20 }}>\n              Causes a net's voltage to be plotted in the simulation results pane (top right).\n            </div>\n\n            <pre style={{ fontWeight: 'bold', fontSize: '120%' }}>signal(pattern: str) -&gt; Net</pre>\n            <div style={{ marginLeft: 20 }}>\n              Constructs a signal generator component, and returns the generator's output net.\n              The pattern string must be made of 0s, 1s, and zs, and may optionally end with ... to indicate that the pattern should repeat.\n              The value z indicates that the signal generator shouldn't drive the output (high Z).\n\n              Examples:\n              <pre style={{ marginLeft: 20 }}>{\n`# Creates a clock signal that toggles every time step.\nclock = signal('01...')\n\n# The signal waits three time steps, then drives high,\n# then stops driving forever.\noutput = signal('zzz1z')`\n              }</pre>\n            </div>\n          </div>\n\n          In the last two levels we will also use the SRAM component:\n\n          <div style={{ marginLeft: 20, marginBottom: 20 }}>\n            <pre style={{ fontWeight: 'bold', fontSize: '120%' }}>{`make_sram(\n  # Input nets that are the bits of the address. (Length sets the address size.)\n  address_nets: List[Net],\n\n  # Input nets to give the value when writing. (Length sets the word size.)\n  bus_in_nets: List[Net],\n\n  # Output nets driven by the SRAM when reading. (Must be same length as bus_in_nets.)\n  bus_out_nets: List[Net],\n\n  # Drive write_enable_net low to read, drive high to write.\n  write_enable_net: Net,\n\n  # An optional list of initial values for the SRAM.\n  # (Length may be at most 2**len(address_nets), remaining words are uninitialized.)\n  contents: List[int] = [],\n)`}</pre>\n            <div style={{ marginLeft: 20 }}>\n              Constructs a read-write word-addressed SRAM, optionally initialized with some chosen data.\n              Drive the <code>address_nets</code> to select a word in the memory.\n\n              If <code>write_enable_net</code> is low then the selected memory word is read, and the <code>bus_out_nets</code> are driven with its value.\n              If <code>write_enable_net</code> is high then the selected memory word is updated to be equal to the value on <code>bus_in_nets</code>, and the <code>bus_out_nets</code> are high-Z.\n              The <code>bus_in_nets</code> are always high-Z.\n              There are no setup or hold times (the SRAM is modeled as nearly instant), and the propagation and contamination delays are also nearly instant.\n\n              Example:\n              <pre style={{ marginLeft: 20 }}>{\n`address_nets = [new_net() for _ in range(12)]\nbus_in_nets  = [new_net() for _ in range(4)]\nbus_out_nets = [new_net() for _ in range(4)]\nwrite_enable_net = new_net()\n\n# Constructs an SRAM that can address 2**12 distinct 4-bit words.\nmake_sram(\n    address_nets,\n    bus_in_nets,\n    bus_out_nets,\n    write_enable_net,\n    # Initialize all 2**12 of the words to be 1010.\n    # This initializer argument is optional.\n    [0b1010 for _ in range(2**12)],\n)`\n              }</pre>\n\n              If you do not use the optional contents intializer then the endianness of the address and bus lines is unobservable,\n              and you may of course use the address lines and bus lines in any scrambled order you please.\n              However, the contents initializer breaks this symmetry; the address and bus lines are little-endian wrt the initializer.\n              That is, <code>(contents[addr] &gt;&gt; bit) &amp; 1</code> is the value you will see on <code>bus_out_nets[bit]</code> when <code>address_nets[i] == (addr &gt;&gt; i) &amp; 1</code>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}